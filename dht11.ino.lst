
C:\Users\ha4ev\AppData\Local\Temp\arduino_build_754451/dht11.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:644
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
       0:	4a c0       	rjmp	.+148    	; 0x96 <__ctors_end>
       2:	6e c0       	rjmp	.+220    	; 0xe0 <__bad_interrupt>
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	cc c9       	rjmp	.-3176   	; 0xfffff3a0 <__eeprom_end+0xff7ef3a0>
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	46 ca       	rjmp	.-2932   	; 0xfffff498 <__eeprom_end+0xff7ef498>
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	68 c0       	rjmp	.+208    	; 0xe0 <__bad_interrupt>
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	66 c0       	rjmp	.+204    	; 0xe0 <__bad_interrupt>
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	64 c0       	rjmp	.+200    	; 0xe0 <__bad_interrupt>
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	19 c3       	rjmp	.+1586   	; 0x64e <__vector_13>
      1c:	5f c3       	rjmp	.+1726   	; 0x6dc <__vector_14>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	25 00       	.word	0x0025	; ????

00000020 <loop::__c>:
      20:	48 75 6d 69 64 69 74 79 3a 20 00                    Humidity: .

0000002b <loop::__c>:
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:645
	if (len == 0 || find.len == 0) return;
      2b:	20 2a 43 00                                          *C.

0000002f <loop::__c>:
      2f:	54 65 6d 70 3a 20 00                                Temp: .

00000036 <loop::__c>:
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:645 (discriminator 2)
      36:	45 72 72 6f 72 20 63 6f 64 65 3a 20 00              Error code: .

00000043 <loop::__c>:
      43:	52 65 61 64 20 66 61 69 6c 65 64 21 00              Read failed!.

00000050 <setup::__c>:
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:647
	int diff = replace.len - find.len;
	char *readFrom = buffer;
      50:	42 79 3a 20 48 41 34 65 76 65 72 20 5e 5f 2a 00     By: HA4ever ^_*.

00000060 <setup::__c>:
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:650 (discriminator 1)
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      60:	57 65 61 74 68 65 72 20 53 74 61 74 69 6f 6e 00     Weather Station.

00000070 <digital_pin_to_timer_PGM>:
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:651
			memcpy(foundAt, replace.buffer, replace.len);
      70:	01 02 00 00 04 00                                   ......

00000076 <digital_pin_to_bit_mask_PGM>:
      76:	01 02 04 08 10 20                                   ..... 

0000007c <digital_pin_to_port_PGM>:
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:652
			readFrom = foundAt + replace.len;
      7c:	02 02 02 02 02 02                                   ......

00000082 <port_to_input_PGM>:
      82:	00 00 00 00 36 00                                   ....6.

00000088 <port_to_output_PGM>:
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:668
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      88:	00 00 00 00 38 00                                   ....8.

0000008e <port_to_mode_PGM>:
      8e:	00 00 00 00 37 00                                   ....7.

00000094 <__ctors_start>:
__ctors_start():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:656 (discriminator 1)
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      94:	60 01       	movw	r12, r0

00000096 <__ctors_end>:
__dtors_end():
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf e5       	ldi	r28, 0x5F	; 95
      9c:	d2 e0       	ldi	r29, 0x02	; 2
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
__do_copy_data():
      a2:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:657
			unsigned int n = foundAt - readFrom;
      a4:	a0 e6       	ldi	r26, 0x60	; 96
      a6:	b0 e0       	ldi	r27, 0x00	; 0
      a8:	e2 e1       	ldi	r30, 0x12	; 18
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:658
			memcpy(writeTo, readFrom, n);
      aa:	fa e1       	ldi	r31, 0x1A	; 26
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:659
			writeTo += n;
      b2:	a2 3a       	cpi	r26, 0xA2	; 162
      b4:	b1 07       	cpc	r27, r17
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:660
			memcpy(writeTo, replace.buffer, replace.len);
      b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
__do_clear_bss():
      b8:	20 e0       	ldi	r18, 0x00	; 0
      ba:	a2 ea       	ldi	r26, 0xA2	; 162
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	ab 3f       	cpi	r26, 0xFB	; 251
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:661
			writeTo += replace.len;
      c4:	b2 07       	cpc	r27, r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>

000000c8 <__do_global_ctors>:
__do_global_ctors():
      c8:	10 e0       	ldi	r17, 0x00	; 0
      ca:	c6 e9       	ldi	r28, 0x96	; 150
      cc:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:662
			readFrom = foundAt + find.len;
      ce:	03 c0       	rjmp	.+6      	; 0xd6 <__do_global_ctors+0xe>
      d0:	22 97       	sbiw	r28, 0x02	; 2
      d2:	fe 01       	movw	r30, r28
      d4:	66 dc       	rcall	.-1844   	; 0xfffff9a2 <__eeprom_end+0xff7ef9a2>
      d6:	c4 39       	cpi	r28, 0x94	; 148
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:663
			len += diff;
      d8:	d1 07       	cpc	r29, r17
      da:	d1 f7       	brne	.-12     	; 0xd0 <__do_global_ctors+0x8>
      dc:	c8 d9       	rcall	.-3184   	; 0xfffff46e <__eeprom_end+0xff7ef46e>
      de:	97 cc       	rjmp	.-1746   	; 0xfffffa0e <__eeprom_end+0xff7efa0e>

000000e0 <__bad_interrupt>:
__vector_1():
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <setup>:
setup():
      e2:	85 b7       	in	r24, 0x35	; 53
      e4:	87 7e       	andi	r24, 0xE7	; 231
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:665
		}
		strcpy(writeTo, readFrom);
      e6:	80 61       	ori	r24, 0x10	; 16
      e8:	85 bf       	out	0x35, r24	; 53
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:684
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
      ea:	62 e0       	ldi	r22, 0x02	; 2
      ec:	84 e0       	ldi	r24, 0x04	; 4
      ee:	af da       	rcall	.-2722   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
      f0:	61 e0       	ldi	r22, 0x01	; 1
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	ac da       	rcall	.-2728   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
      f6:	61 e0       	ldi	r22, 0x01	; 1
      f8:	83 e0       	ldi	r24, 0x03	; 3
      fa:	a9 da       	rcall	.-2734   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
      fc:	61 e0       	ldi	r22, 0x01	; 1
      fe:	83 e0       	ldi	r24, 0x03	; 3
     100:	f0 da       	rcall	.-2592   	; 0xfffff6e2 <__eeprom_end+0xff7ef6e2>
     102:	8c ea       	ldi	r24, 0xAC	; 172
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	ea d1       	rcall	.+980    	; 0x4dc <LiquidCrystal_I2C::init()>
     108:	8c ea       	ldi	r24, 0xAC	; 172
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	8d d1       	rcall	.+794    	; 0x428 <LiquidCrystal_I2C::display()>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:665
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
     10e:	8c ea       	ldi	r24, 0xAC	; 172
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:668 (discriminator 1)
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	03 d1       	rcall	.+518    	; 0x31a <LiquidCrystal_I2C::backlight()>
     114:	40 e0       	ldi	r20, 0x00	; 0
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	8c ea       	ldi	r24, 0xAC	; 172
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:669
			readFrom = foundAt + find.len;
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	4f d1       	rcall	.+670    	; 0x3bc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
     11e:	60 e6       	ldi	r22, 0x60	; 96
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:670
			size += diff;
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	8c ea       	ldi	r24, 0xAC	; 172
     124:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:672
		}
		if (size == len) return;
     126:	1f d7       	rcall	.+3646   	; 0xf66 <Print::print(__FlashStringHelper const*)>
     128:	41 e0       	ldi	r20, 0x01	; 1
     12a:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:673
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
     12c:	8c ea       	ldi	r24, 0xAC	; 172
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	45 d1       	rcall	.+650    	; 0x3bc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
     132:	60 e5       	ldi	r22, 0x50	; 80
     134:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:673 (discriminator 1)
     136:	8c ea       	ldi	r24, 0xAC	; 172
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	15 d7       	rcall	.+3626   	; 0xf66 <Print::print(__FlashStringHelper const*)>
     13c:	6c ed       	ldi	r22, 0xDC	; 220
     13e:	75 e0       	ldi	r23, 0x05	; 5
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:674
		int index = len - 1;
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:681
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
     144:	18 ca       	rjmp	.-3024   	; 0xfffff576 <__eeprom_end+0xff7ef576>

00000146 <enterSleep()>:
_Z10enterSleepv():
     146:	0f 93       	push	r16
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:675
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
     148:	1f 93       	push	r17
     14a:	09 e1       	ldi	r16, 0x19	; 25
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:675 (discriminator 1)
     14c:	10 e0       	ldi	r17, 0x00	; 0
     14e:	20 e0       	ldi	r18, 0x00	; 0
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	4c e2       	ldi	r20, 0x2C	; 44
     154:	51 e0       	ldi	r21, 0x01	; 1
     156:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:676
			readFrom = buffer + index + find.len;
     158:	70 e0       	ldi	r23, 0x00	; 0
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	cf d7       	rcall	.+3998   	; 0x10fc <tone(unsigned char, unsigned long, unsigned long)>
     15e:	8c ea       	ldi	r24, 0xAC	; 172
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	d7 d0       	rcall	.+430    	; 0x312 <LiquidCrystal_I2C::noBacklight()>
     164:	8c ea       	ldi	r24, 0xAC	; 172
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:677
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	59 d1       	rcall	.+690    	; 0x41c <LiquidCrystal_I2C::noDisplay()>
     16a:	62 e3       	ldi	r22, 0x32	; 50
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	01 da       	rcall	.-3070   	; 0xfffff576 <__eeprom_end+0xff7ef576>
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	83 e0       	ldi	r24, 0x03	; 3
     178:	b4 da       	rcall	.-2712   	; 0xfffff6e2 <__eeprom_end+0xff7ef6e2>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:678
			len += diff;
     17a:	80 b5       	in	r24, 0x20	; 32
     17c:	82 60       	ori	r24, 0x02	; 2
     17e:	80 bd       	out	0x20, r24	; 32
     180:	80 b5       	in	r24, 0x20	; 32
     182:	88 60       	ori	r24, 0x08	; 8
     184:	80 bd       	out	0x20, r24	; 32
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:679
			buffer[len] = 0;
     186:	80 b5       	in	r24, 0x20	; 32
     188:	81 60       	ori	r24, 0x01	; 1
     18a:	80 bd       	out	0x20, r24	; 32
     18c:	80 b5       	in	r24, 0x20	; 32
     18e:	8f 60       	ori	r24, 0x0F	; 15
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:680
			memcpy(buffer + index, replace.buffer, replace.len);
     190:	80 bd       	out	0x20, r24	; 32
     192:	85 b7       	in	r24, 0x35	; 53
     194:	80 62       	ori	r24, 0x20	; 32
     196:	85 bf       	out	0x35, r24	; 53
     198:	88 95       	sleep
     19a:	1f 91       	pop	r17
     19c:	0f 91       	pop	r16
     19e:	08 95       	ret

000001a0 <loop>:
loop():
     1a0:	ff 92       	push	r15
     1a2:	0f 93       	push	r16
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:681
			index--;
     1a4:	1f 93       	push	r17
     1a6:	cf 93       	push	r28
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/WString.cpp:684
		}
	}
}
     1a8:	df 93       	push	r29
     1aa:	00 d0       	rcall	.+0      	; 0x1ac <loop+0xc>
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
     1b0:	1a 82       	std	Y+2, r1	; 0x02
     1b2:	19 82       	std	Y+1, r1	; 0x01
     1b4:	86 e0       	ldi	r24, 0x06	; 6
     1b6:	f8 2e       	mov	r15, r24
     1b8:	e0 91 a2 00 	lds	r30, 0x00A2
     1bc:	f0 91 a3 00 	lds	r31, 0x00A3
     1c0:	02 80       	ldd	r0, Z+2	; 0x02
     1c2:	f3 81       	ldd	r31, Z+3	; 0x03
     1c4:	e0 2d       	mov	r30, r0
     1c6:	00 e0       	ldi	r16, 0x00	; 0
     1c8:	10 e0       	ldi	r17, 0x00	; 0
     1ca:	9e 01       	movw	r18, r28
     1cc:	2f 5f       	subi	r18, 0xFF	; 255
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:36
void loop()
{
  byte temperature = 0, humidity = 0;
  int err = SimpleDHTErrSuccess;
  for (byte i = 0; i < 6; i++) {
    if ((err = dht11.read(pinDHT11, &temperature, &humidity, NULL)) != SimpleDHTErrSuccess) {
     1ce:	3f 4f       	sbci	r19, 0xFF	; 255
     1d0:	ae 01       	movw	r20, r28
     1d2:	4e 5f       	subi	r20, 0xFE	; 254
     1d4:	5f 4f       	sbci	r21, 0xFF	; 255
     1d6:	64 e0       	ldi	r22, 0x04	; 4
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	82 ea       	ldi	r24, 0xA2	; 162
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	09 95       	icall
     1e0:	8c 01       	movw	r16, r24
     1e2:	00 97       	sbiw	r24, 0x00	; 0
     1e4:	19 f1       	breq	.+70     	; 0x22c <loop+0x8c>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:37
      lcd.clear();
     1e6:	8c ea       	ldi	r24, 0xAC	; 172
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	de d0       	rcall	.+444    	; 0x3a8 <LiquidCrystal_I2C::clear()>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:38
      lcd.setCursor(0, 0);
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	8c ea       	ldi	r24, 0xAC	; 172
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	e3 d0       	rcall	.+454    	; 0x3bc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:39
      lcd.print(F("Read failed!"));
     1f6:	63 e4       	ldi	r22, 0x43	; 67
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	8c ea       	ldi	r24, 0xAC	; 172
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	b3 d6       	rcall	.+3430   	; 0xf66 <Print::print(__FlashStringHelper const*)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:40
      lcd.setCursor(0, 1);
     200:	41 e0       	ldi	r20, 0x01	; 1
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	8c ea       	ldi	r24, 0xAC	; 172
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	d9 d0       	rcall	.+434    	; 0x3bc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:41
      lcd.print(F("Error code: "));
     20a:	66 e3       	ldi	r22, 0x36	; 54
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	8c ea       	ldi	r24, 0xAC	; 172
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	a9 d6       	rcall	.+3410   	; 0xf66 <Print::print(__FlashStringHelper const*)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:42
      lcd.print(err);
     214:	4a e0       	ldi	r20, 0x0A	; 10
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	b8 01       	movw	r22, r16
     21a:	8c ea       	ldi	r24, 0xAC	; 172
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	67 d7       	rcall	.+3790   	; 0x10ee <Print::print(int, int)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:43
      delay(1000);
     220:	68 ee       	ldi	r22, 0xE8	; 232
     222:	73 e0       	ldi	r23, 0x03	; 3
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	a6 d9       	rcall	.-3252   	; 0xfffff576 <__eeprom_end+0xff7ef576>
     22a:	42 c0       	rjmp	.+132    	; 0x2b0 <__stack+0x51>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:46
      return;
    }
    tone(buzzer, 500, 25);
     22c:	09 e1       	ldi	r16, 0x19	; 25
     22e:	10 e0       	ldi	r17, 0x00	; 0
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	44 ef       	ldi	r20, 0xF4	; 244
     236:	51 e0       	ldi	r21, 0x01	; 1
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	5e d7       	rcall	.+3772   	; 0x10fc <tone(unsigned char, unsigned long, unsigned long)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:47
    lcd.clear();
     240:	8c ea       	ldi	r24, 0xAC	; 172
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	b1 d0       	rcall	.+354    	; 0x3a8 <LiquidCrystal_I2C::clear()>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:48
    lcd.setCursor(0, 0);
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	60 e0       	ldi	r22, 0x00	; 0
     24a:	8c ea       	ldi	r24, 0xAC	; 172
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	b6 d0       	rcall	.+364    	; 0x3bc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:49
    lcd.print(F("Temp: "));
     250:	6f e2       	ldi	r22, 0x2F	; 47
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	8c ea       	ldi	r24, 0xAC	; 172
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	86 d6       	rcall	.+3340   	; 0xf66 <Print::print(__FlashStringHelper const*)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:50
    lcd.print((int)temperature);
     25a:	6a 81       	ldd	r22, Y+2	; 0x02
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	4a e0       	ldi	r20, 0x0A	; 10
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	8c ea       	ldi	r24, 0xAC	; 172
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	43 d7       	rcall	.+3718   	; 0x10ee <Print::print(int, int)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:51
    lcd.print(F(" *C"));
     268:	6b e2       	ldi	r22, 0x2B	; 43
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	8c ea       	ldi	r24, 0xAC	; 172
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	7a d6       	rcall	.+3316   	; 0xf66 <Print::print(__FlashStringHelper const*)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:52
    lcd.setCursor(0, 1);
     272:	41 e0       	ldi	r20, 0x01	; 1
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	8c ea       	ldi	r24, 0xAC	; 172
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	a0 d0       	rcall	.+320    	; 0x3bc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:53
    lcd.print(F("Humidity: "));
     27c:	60 e2       	ldi	r22, 0x20	; 32
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	8c ea       	ldi	r24, 0xAC	; 172
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	70 d6       	rcall	.+3296   	; 0xf66 <Print::print(__FlashStringHelper const*)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:54
    lcd.print((int)humidity);
     286:	69 81       	ldd	r22, Y+1	; 0x01
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	4a e0       	ldi	r20, 0x0A	; 10
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	8c ea       	ldi	r24, 0xAC	; 172
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	2d d7       	rcall	.+3674   	; 0x10ee <Print::print(int, int)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:55
    lcd.print(F("%"));
     294:	6e e1       	ldi	r22, 0x1E	; 30
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	8c ea       	ldi	r24, 0xAC	; 172
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	64 d6       	rcall	.+3272   	; 0xf66 <Print::print(__FlashStringHelper const*)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:56
    delay(1250);
     29e:	62 ee       	ldi	r22, 0xE2	; 226
     2a0:	74 e0       	ldi	r23, 0x04	; 4
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	67 d9       	rcall	.-3378   	; 0xfffff576 <__eeprom_end+0xff7ef576>
     2a8:	fa 94       	dec	r15
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:35

void loop()
{
  byte temperature = 0, humidity = 0;
  int err = SimpleDHTErrSuccess;
  for (byte i = 0; i < 6; i++) {
     2aa:	09 f0       	breq	.+2      	; 0x2ae <__stack+0x4f>
     2ac:	85 cf       	rjmp	.-246    	; 0x1b8 <loop+0x18>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:58
    lcd.print(F("Humidity: "));
    lcd.print((int)humidity);
    lcd.print(F("%"));
    delay(1250);
  }
  enterSleep();
     2ae:	4b df       	rcall	.-362    	; 0x146 <enterSleep()>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:59
}
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	ff 90       	pop	r15
     2be:	08 95       	ret

000002c0 <_GLOBAL__sub_I_lcd>:
__static_initialization_and_destruction_0():
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:10

#define buzzer 1
#define LcdPwr 3
#define pinDHT11 4

LiquidCrystal_I2C lcd(0x3F, 16, 2);  // set the LCD address to 0x3F for a 16 chars and 2 line display (Green)
     2c0:	22 e0       	ldi	r18, 0x02	; 2
     2c2:	40 e1       	ldi	r20, 0x10	; 16
     2c4:	6f e3       	ldi	r22, 0x3F	; 63
     2c6:	8c ea       	ldi	r24, 0xAC	; 172
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	03 d0       	rcall	.+6      	; 0x2d2 <LiquidCrystal_I2C::LiquidCrystal_I2C(unsigned char, unsigned char, unsigned char)>
C:\Users\ha4ev\Desktop\Attiny85\dht11/dht11.ino:12
//LiquidCrystal_I2C lcd(0x27, 16, 2);  // set the LCD address to 0x27 for a 16 chars and 2 line display (Blue)
SimpleDHT11 dht11;
     2cc:	82 ea       	ldi	r24, 0xA2	; 162
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	00 c6       	rjmp	.+3072   	; 0xed2 <SimpleDHT11::SimpleDHT11()>

000002d2 <LiquidCrystal_I2C::LiquidCrystal_I2C(unsigned char, unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2CC2Ehhh():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:47
//
// Note, however, that resetting the Arduino doesn't reset the LCD, so we
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows)
     2d2:	fc 01       	movw	r30, r24
Print():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.h:75
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     2d4:	13 82       	std	Z+3, r1	; 0x03
     2d6:	12 82       	std	Z+2, r1	; 0x02
_ZN17LiquidCrystal_I2CC2Ehhh():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:47
     2d8:	85 e7       	ldi	r24, 0x75	; 117
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	91 83       	std	Z+1, r25	; 0x01
     2de:	80 83       	st	Z, r24
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:49
{
  _Addr = lcd_Addr;
     2e0:	64 83       	std	Z+4, r22	; 0x04
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:50
  _cols = lcd_cols;
     2e2:	41 87       	std	Z+9, r20	; 0x09
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:51
  _rows = lcd_rows;
     2e4:	22 87       	std	Z+10, r18	; 0x0a
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:52
  _backlightval = LCD_NOBACKLIGHT;
     2e6:	13 86       	std	Z+11, r1	; 0x0b
     2e8:	08 95       	ret

000002ea <LiquidCrystal_I2C::expanderWrite(unsigned char)>:
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:252
void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	ec 01       	movw	r28, r24
     2f2:	16 2f       	mov	r17, r22
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:253
	Wire.beginTransmission(_Addr);
     2f4:	6c 81       	ldd	r22, Y+4	; 0x04
     2f6:	8e eb       	ldi	r24, 0xBE	; 190
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	ac d2       	rcall	.+1368   	; 0x854 <TwoWire::beginTransmission(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:254
	printIIC((int)(_data) | _backlightval);
     2fc:	6b 85       	ldd	r22, Y+11	; 0x0b
     2fe:	61 2b       	or	r22, r17
_ZN7TwoWire5writeEi():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.h:138
    uint8_t isActive(void);

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     300:	8e eb       	ldi	r24, 0xBE	; 190
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	d7 d2       	rcall	.+1454   	; 0x8b4 <TwoWire::write(unsigned char)>
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:255
	Wire.endTransmission();   
     306:	8e eb       	ldi	r24, 0xBE	; 190
     308:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:256
}
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:255
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
	Wire.beginTransmission(_Addr);
	printIIC((int)(_data) | _backlightval);
	Wire.endTransmission();   
     310:	cf c2       	rjmp	.+1438   	; 0x8b0 <TwoWire::endTransmission()>

00000312 <LiquidCrystal_I2C::noBacklight()>:
_ZN17LiquidCrystal_I2C11noBacklightEv():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
     312:	fc 01       	movw	r30, r24
     314:	13 86       	std	Z+11, r1	; 0x0b
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	e8 cf       	rjmp	.-48     	; 0x2ea <LiquidCrystal_I2C::expanderWrite(unsigned char)>

0000031a <LiquidCrystal_I2C::backlight()>:
_ZN17LiquidCrystal_I2C9backlightEv():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
     31a:	28 e0       	ldi	r18, 0x08	; 8
     31c:	fc 01       	movw	r30, r24
     31e:	23 87       	std	Z+11, r18	; 0x0b
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	e3 cf       	rjmp	.-58     	; 0x2ea <LiquidCrystal_I2C::expanderWrite(unsigned char)>

00000324 <LiquidCrystal_I2C::pulseEnable(unsigned char)>:
_ZN17LiquidCrystal_I2C11pulseEnableEh():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:258
	Wire.beginTransmission(_Addr);
	printIIC((int)(_data) | _backlightval);
	Wire.endTransmission();   
}

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	ec 01       	movw	r28, r24
     32c:	16 2f       	mov	r17, r22
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:259
	expanderWrite(_data | En);	// En high
     32e:	64 60       	ori	r22, 0x04	; 4
     330:	dc df       	rcall	.-72     	; 0x2ea <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:260
	delayMicroseconds(1);		// enable pulse must be >450ns
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	49 d9       	rcall	.-3438   	; 0xfffff5ca <__eeprom_end+0xff7ef5ca>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:262
	
	expanderWrite(_data & ~En);	// En low
     338:	61 2f       	mov	r22, r17
     33a:	6b 7f       	andi	r22, 0xFB	; 251
     33c:	ce 01       	movw	r24, r28
     33e:	d5 df       	rcall	.-86     	; 0x2ea <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
	delayMicroseconds(50);		// commands need > 37us to settle
     340:	82 e3       	ldi	r24, 0x32	; 50
     342:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:264
} 
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
	delayMicroseconds(1);		// enable pulse must be >450ns
	
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
     34a:	3f c9       	rjmp	.-3458   	; 0xfffff5ca <__eeprom_end+0xff7ef5ca>

0000034c <LiquidCrystal_I2C::write4bits(unsigned char)>:
_ZN17LiquidCrystal_I2C10write4bitsEh():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:247
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	ec 01       	movw	r28, r24
     354:	16 2f       	mov	r17, r22
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:248
	expanderWrite(value);
     356:	c9 df       	rcall	.-110    	; 0x2ea <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:249
	pulseEnable(value);
     358:	61 2f       	mov	r22, r17
     35a:	ce 01       	movw	r24, r28
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:250
}
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:249
	write4bits((lownib)|mode); 
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
     362:	e0 cf       	rjmp	.-64     	; 0x324 <LiquidCrystal_I2C::pulseEnable(unsigned char)>

00000364 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2C4sendEhh():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:240


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	1f 92       	push	r1
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	7c 01       	movw	r14, r24
     376:	16 2f       	mov	r17, r22
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:241
	uint8_t highnib=value&0xf0;
     378:	60 7f       	andi	r22, 0xF0	; 240
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:243
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
     37a:	64 2b       	or	r22, r20
     37c:	49 83       	std	Y+1, r20	; 0x01
     37e:	e6 df       	rcall	.-52     	; 0x34c <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:242
/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
     380:	61 2f       	mov	r22, r17
     382:	62 95       	swap	r22
     384:	60 7f       	andi	r22, 0xF0	; 240
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     386:	49 81       	ldd	r20, Y+1	; 0x01
     388:	64 2b       	or	r22, r20
     38a:	c7 01       	movw	r24, r14
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:245
}
     38c:	0f 90       	pop	r0
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     398:	d9 cf       	rjmp	.-78     	; 0x34c <LiquidCrystal_I2C::write4bits(unsigned char)>

0000039a <LiquidCrystal_I2C::write(unsigned char)>:
_ZN17LiquidCrystal_I2C5writeEh():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     39a:	41 e0       	ldi	r20, 0x01	; 1
     39c:	e3 df       	rcall	.-58     	; 0x364 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:13
	return 1;
}
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	08 95       	ret

000003a4 <LiquidCrystal_I2C::command(unsigned char)>:
_ZN17LiquidCrystal_I2C7commandEh():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	de cf       	rjmp	.-68     	; 0x364 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>

000003a8 <LiquidCrystal_I2C::clear()>:
_ZN17LiquidCrystal_I2C5clearEv():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:128
  
}

/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	fc df       	rcall	.-8      	; 0x3a4 <LiquidCrystal_I2C::command(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:129
	delayMicroseconds(2000);  // this command takes a long time!
     3ac:	80 ed       	ldi	r24, 0xD0	; 208
     3ae:	97 e0       	ldi	r25, 0x07	; 7
     3b0:	0c c9       	rjmp	.-3560   	; 0xfffff5ca <__eeprom_end+0xff7ef5ca>

000003b2 <LiquidCrystal_I2C::home()>:
_ZN17LiquidCrystal_I2C4homeEv():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:133
}

void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
     3b2:	62 e0       	ldi	r22, 0x02	; 2
     3b4:	f7 df       	rcall	.-18     	; 0x3a4 <LiquidCrystal_I2C::command(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:134
	delayMicroseconds(2000);  // this command takes a long time!
     3b6:	80 ed       	ldi	r24, 0xD0	; 208
     3b8:	97 e0       	ldi	r25, 0x07	; 7
     3ba:	07 c9       	rjmp	.-3570   	; 0xfffff5ca <__eeprom_end+0xff7ef5ca>

000003bc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2C9setCursorEhh():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:137
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	28 97       	sbiw	r28, 0x08	; 8
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:138
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     3d0:	28 e0       	ldi	r18, 0x08	; 8
     3d2:	e9 e6       	ldi	r30, 0x69	; 105
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	de 01       	movw	r26, r28
     3d8:	11 96       	adiw	r26, 0x01	; 1
     3da:	01 90       	ld	r0, Z+
     3dc:	0d 92       	st	X+, r0
     3de:	2a 95       	dec	r18
     3e0:	e1 f7       	brne	.-8      	; 0x3da <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)+0x1e>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:139
	if ( row > _numlines ) {
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 85       	ldd	r18, Z+8	; 0x08
     3e6:	24 17       	cp	r18, r20
     3e8:	10 f4       	brcc	.+4      	; 0x3ee <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)+0x32>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:140
		row = _numlines-1;    // we count rows starting w/0
     3ea:	4f ef       	ldi	r20, 0xFF	; 255
     3ec:	42 0f       	add	r20, r18
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:142
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     3ee:	e4 2f       	mov	r30, r20
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	ee 0f       	add	r30, r30
     3f4:	ff 1f       	adc	r31, r31
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	2c 0f       	add	r18, r28
     3fc:	3d 1f       	adc	r19, r29
     3fe:	e2 0f       	add	r30, r18
     400:	f3 1f       	adc	r31, r19
     402:	20 81       	ld	r18, Z
     404:	26 0f       	add	r18, r22
     406:	20 68       	ori	r18, 0x80	; 128
     408:	62 2f       	mov	r22, r18
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:143
}
     40a:	28 96       	adiw	r28, 0x08	; 8
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:142
void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     41a:	c4 cf       	rjmp	.-120    	; 0x3a4 <LiquidCrystal_I2C::command(unsigned char)>

0000041c <LiquidCrystal_I2C::noDisplay()>:
_ZN17LiquidCrystal_I2C9noDisplayEv():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:147
}

// Turn the display on/off (quickly)
void LiquidCrystal_I2C::noDisplay() {
	_displaycontrol &= ~LCD_DISPLAYON;
     41c:	fc 01       	movw	r30, r24
     41e:	66 81       	ldd	r22, Z+6	; 0x06
     420:	6b 7f       	andi	r22, 0xFB	; 251
     422:	66 83       	std	Z+6, r22	; 0x06
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:148
	command(LCD_DISPLAYCONTROL | _displaycontrol);
     424:	68 60       	ori	r22, 0x08	; 8
     426:	be cf       	rjmp	.-132    	; 0x3a4 <LiquidCrystal_I2C::command(unsigned char)>

00000428 <LiquidCrystal_I2C::display()>:
_ZN17LiquidCrystal_I2C7displayEv():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:151
}
void LiquidCrystal_I2C::display() {
	_displaycontrol |= LCD_DISPLAYON;
     428:	fc 01       	movw	r30, r24
     42a:	66 81       	ldd	r22, Z+6	; 0x06
     42c:	26 2f       	mov	r18, r22
     42e:	24 60       	ori	r18, 0x04	; 4
     430:	26 83       	std	Z+6, r18	; 0x06
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:152
	command(LCD_DISPLAYCONTROL | _displaycontrol);
     432:	6c 60       	ori	r22, 0x0C	; 12
     434:	b7 cf       	rjmp	.-146    	; 0x3a4 <LiquidCrystal_I2C::command(unsigned char)>

00000436 <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2C5beginEhhh():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:66
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	ec 01       	movw	r28, r24
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:67
	if (lines > 1) {
     43c:	42 30       	cpi	r20, 0x02	; 2
     43e:	18 f0       	brcs	.+6      	; 0x446 <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char)+0x10>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:68
		_displayfunction |= LCD_2LINE;
     440:	8d 81       	ldd	r24, Y+5	; 0x05
     442:	88 60       	ori	r24, 0x08	; 8
     444:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:70
	}
	_numlines = lines;
     446:	48 87       	std	Y+8, r20	; 0x08
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:73

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
     448:	22 23       	and	r18, r18
     44a:	29 f0       	breq	.+10     	; 0x456 <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char)+0x20>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:73 (discriminator 1)
     44c:	41 30       	cpi	r20, 0x01	; 1
     44e:	19 f4       	brne	.+6      	; 0x456 <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char)+0x20>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:74
		_displayfunction |= LCD_5x10DOTS;
     450:	8d 81       	ldd	r24, Y+5	; 0x05
     452:	84 60       	ori	r24, 0x04	; 4
     454:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:80
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
     456:	62 e3       	ldi	r22, 0x32	; 50
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	8b d8       	rcall	.-3818   	; 0xfffff576 <__eeprom_end+0xff7ef576>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:83
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
     460:	6b 85       	ldd	r22, Y+11	; 0x0b
     462:	ce 01       	movw	r24, r28
     464:	42 df       	rcall	.-380    	; 0x2ea <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:84
	delay(1000);
     466:	68 ee       	ldi	r22, 0xE8	; 232
     468:	73 e0       	ldi	r23, 0x03	; 3
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	83 d8       	rcall	.-3834   	; 0xfffff576 <__eeprom_end+0xff7ef576>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:91
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
     470:	60 e3       	ldi	r22, 0x30	; 48
     472:	ce 01       	movw	r24, r28
     474:	6b df       	rcall	.-298    	; 0x34c <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:92
   delayMicroseconds(4500); // wait min 4.1ms
     476:	84 e9       	ldi	r24, 0x94	; 148
     478:	91 e1       	ldi	r25, 0x11	; 17
     47a:	a7 d8       	rcall	.-3762   	; 0xfffff5ca <__eeprom_end+0xff7ef5ca>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:95
   
   // second try
   write4bits(0x03 << 4);
     47c:	60 e3       	ldi	r22, 0x30	; 48
     47e:	ce 01       	movw	r24, r28
     480:	65 df       	rcall	.-310    	; 0x34c <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:96
   delayMicroseconds(4500); // wait min 4.1ms
     482:	84 e9       	ldi	r24, 0x94	; 148
     484:	91 e1       	ldi	r25, 0x11	; 17
     486:	a1 d8       	rcall	.-3774   	; 0xfffff5ca <__eeprom_end+0xff7ef5ca>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:99
   
   // third go!
   write4bits(0x03 << 4); 
     488:	60 e3       	ldi	r22, 0x30	; 48
     48a:	ce 01       	movw	r24, r28
     48c:	5f df       	rcall	.-322    	; 0x34c <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:100
   delayMicroseconds(150);
     48e:	86 e9       	ldi	r24, 0x96	; 150
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	9b d8       	rcall	.-3786   	; 0xfffff5ca <__eeprom_end+0xff7ef5ca>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:103
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
     494:	60 e2       	ldi	r22, 0x20	; 32
     496:	ce 01       	movw	r24, r28
     498:	59 df       	rcall	.-334    	; 0x34c <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:107


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
     49a:	6d 81       	ldd	r22, Y+5	; 0x05
     49c:	60 62       	ori	r22, 0x20	; 32
     49e:	ce 01       	movw	r24, r28
     4a0:	81 df       	rcall	.-254    	; 0x3a4 <LiquidCrystal_I2C::command(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:110
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:111
	display();
     4a6:	ce 01       	movw	r24, r28
     4a8:	bf df       	rcall	.-130    	; 0x428 <LiquidCrystal_I2C::display()>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:114
	
	// clear it off
	clear();
     4aa:	ce 01       	movw	r24, r28
     4ac:	7d df       	rcall	.-262    	; 0x3a8 <LiquidCrystal_I2C::clear()>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:117
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	8f 83       	std	Y+7, r24	; 0x07
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:120
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
     4b2:	66 e0       	ldi	r22, 0x06	; 6
     4b4:	ce 01       	movw	r24, r28
     4b6:	76 df       	rcall	.-276    	; 0x3a4 <LiquidCrystal_I2C::command(unsigned char)>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:122
	
	home();
     4b8:	ce 01       	movw	r24, r28
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:124
  
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:122
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
     4be:	79 cf       	rjmp	.-270    	; 0x3b2 <LiquidCrystal_I2C::home()>

000004c0 <LiquidCrystal_I2C::init_priv()>:
_ZN17LiquidCrystal_I2C9init_privEv():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:60
void LiquidCrystal_I2C::init(){
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	ec 01       	movw	r28, r24
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:61
	Wire.begin();
     4c6:	8e eb       	ldi	r24, 0xBE	; 190
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	bd d1       	rcall	.+890    	; 0x846 <TwoWire::begin()>
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:62
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
     4cc:	1d 82       	std	Y+5, r1	; 0x05
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:63
	begin(_cols, _rows);  
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	4a 85       	ldd	r20, Y+10	; 0x0a
     4d2:	69 85       	ldd	r22, Y+9	; 0x09
     4d4:	ce 01       	movw	r24, r28
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:64
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:63

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
     4da:	ad cf       	rjmp	.-166    	; 0x436 <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char)>

000004dc <LiquidCrystal_I2C::init()>:
_ZN17LiquidCrystal_I2C4initEv():
C:\Users\ha4ev\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:56
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
     4dc:	f1 cf       	rjmp	.-30     	; 0x4c0 <LiquidCrystal_I2C::init_priv()>

000004de <USI_TWI_Master_Initialise>:
USI_TWI_Master_Initialise():
/*---------------------------------------------------------------
 USI TWI single master initialization function
---------------------------------------------------------------*/
void USI_TWI_Master_Initialise(void)
{
	PORT_USI |= (1 << PIN_USI_SDA); // Enable pullup on SDA, to set high as released state.
     4de:	c0 9a       	sbi	0x18, 0	; 24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:57
	PORT_USI_CL |= (1 << PIN_USI_SCL); // Enable pullup on SCL, to set high as released state.
     4e0:	c2 9a       	sbi	0x18, 2	; 24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:59

	DDR_USI_CL |= (1 << PIN_USI_SCL); // Enable SCL as output.
     4e2:	ba 9a       	sbi	0x17, 2	; 23
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:60
	DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
     4e4:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:62

	USIDR = 0xFF;                                           // Preload dataregister with "released level" data.
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	8f b9       	out	0x0f, r24	; 15
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:63
	USICR = (0 << USISIE) | (0 << USIOIE) |                 // Disable Interrupts.
     4ea:	8a e2       	ldi	r24, 0x2A	; 42
     4ec:	8d b9       	out	0x0d, r24	; 13
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:67
	        (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
	        (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software stobe as counter clock source
	        (0 << USITC);
	USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags,
     4ee:	80 ef       	ldi	r24, 0xF0	; 240
     4f0:	8e b9       	out	0x0e, r24	; 14
     4f2:	08 95       	ret

000004f4 <USI_TWI_Get_State_Info>:
USI_TWI_Get_State_Info():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:77
Use this function to get hold of the error message from the last transmission
---------------------------------------------------------------*/
unsigned char USI_TWI_Get_State_Info(void)
{
	return (USI_TWI_state.errorState); // Return error state.
}
     4f4:	80 91 da 00 	lds	r24, 0x00DA
     4f8:	08 95       	ret

000004fa <USI_TWI_Master_Transfer>:
USI_TWI_Master_Transfer():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:226
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer(unsigned char temp)
{
	USISR = temp;                                          // Set USISR according to temp.
     4fa:	8e b9       	out	0x0e, r24	; 14
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:234
	       (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
	       (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software clock strobe as source.
	       (1 << USITC);                                   // Toggle Clock Port.
	do {
		DELAY_T2TWI;
		USICR = temp; // Generate positve SCL edge.
     4fc:	8b e2       	ldi	r24, 0x2B	; 43
_delay_us():
c:\users\ha4ev\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.8.1-arduino5\avr\include\util/delay.h:245
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fe:	9c e1       	ldi	r25, 0x1C	; 28
     500:	9a 95       	dec	r25
     502:	f1 f7       	brne	.-4      	; 0x500 <USI_TWI_Master_Transfer+0x6>
USI_TWI_Master_Transfer():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:234
     504:	8d b9       	out	0x0d, r24	; 13
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:235 (discriminator 1)
		while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     506:	b2 9b       	sbis	0x16, 2	; 22
     508:	fe cf       	rjmp	.-4      	; 0x506 <USI_TWI_Master_Transfer+0xc>
_delay_us():
c:\users\ha4ev\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.8.1-arduino5\avr\include\util/delay.h:245
     50a:	9d e0       	ldi	r25, 0x0D	; 13
     50c:	9a 95       	dec	r25
     50e:	f1 f7       	brne	.-4      	; 0x50c <USI_TWI_Master_Transfer+0x12>
USI_TWI_Master_Transfer():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:238
			; // Wait for SCL to go high.
		DELAY_T4TWI;
		USICR = temp;                   // Generate negative SCL edge.
     510:	8d b9       	out	0x0d, r24	; 13
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:239
	} while (!(USISR & (1 << USIOIF))); // Check for transfer complete.
     512:	76 9b       	sbis	0x0e, 6	; 14
     514:	f4 cf       	rjmp	.-24     	; 0x4fe <USI_TWI_Master_Transfer+0x4>
_delay_us():
c:\users\ha4ev\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.8.1-arduino5\avr\include\util/delay.h:245
     516:	8c e1       	ldi	r24, 0x1C	; 28
     518:	8a 95       	dec	r24
     51a:	f1 f7       	brne	.-4      	; 0x518 <USI_TWI_Master_Transfer+0x1e>
USI_TWI_Master_Transfer():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:242

	DELAY_T2TWI;
	temp  = USIDR;                 // Read out data.
     51c:	8f b1       	in	r24, 0x0f	; 15
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:243
	USIDR = 0xFF;                  // Release SDA.
     51e:	9f ef       	ldi	r25, 0xFF	; 255
     520:	9f b9       	out	0x0f, r25	; 15
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:244
	DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
     522:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:247

	return temp; // Return the data from the USIDR
}
     524:	08 95       	ret

00000526 <USI_TWI_Master_Stop>:
USI_TWI_Master_Stop():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:255
 Function for generating a TWI Stop Condition. Used to release
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop(void)
{
	PORT_USI &= ~(1 << PIN_USI_SDA); // Pull SDA low.
     526:	c0 98       	cbi	0x18, 0	; 24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:256
	PORT_USI_CL |= (1 << PIN_USI_SCL);  // Release SCL.
     528:	c2 9a       	sbi	0x18, 2	; 24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:257 (discriminator 1)
	while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     52a:	b2 9b       	sbis	0x16, 2	; 22
     52c:	fe cf       	rjmp	.-4      	; 0x52a <USI_TWI_Master_Stop+0x4>
_delay_us():
c:\users\ha4ev\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.8.1-arduino5\avr\include\util/delay.h:245
     52e:	8d e0       	ldi	r24, 0x0D	; 13
     530:	8a 95       	dec	r24
     532:	f1 f7       	brne	.-4      	; 0x530 <USI_TWI_Master_Stop+0xa>
USI_TWI_Master_Stop():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:260
		; // Wait for SCL to go high.
	DELAY_T4TWI;
	PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
     534:	c0 9a       	sbi	0x18, 0	; 24
_delay_us():
c:\users\ha4ev\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.8.1-arduino5\avr\include\util/delay.h:245
     536:	8c e1       	ldi	r24, 0x1C	; 28
     538:	8a 95       	dec	r24
     53a:	f1 f7       	brne	.-4      	; 0x538 <USI_TWI_Master_Stop+0x12>
USI_TWI_Master_Stop():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:264
	DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
	if (!(USISR & (1 << USIPF))) {
     53c:	9e b1       	in	r25, 0x0e	; 14
     53e:	89 2f       	mov	r24, r25
     540:	80 72       	andi	r24, 0x20	; 32
     542:	95 fd       	sbrc	r25, 5
     544:	04 c0       	rjmp	.+8      	; 0x54e <USI_TWI_Master_Stop+0x28>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:265
		USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
     546:	98 e0       	ldi	r25, 0x08	; 8
     548:	90 93 da 00 	sts	0x00DA, r25
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:266
		return (FALSE);
     54c:	08 95       	ret
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:270
	}
#endif

	return (TRUE);
     54e:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:271
}
     550:	08 95       	ret

00000552 <USI_TWI_Start_Transceiver_With_Data_Stop>:
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:106
#ifndef __GNUC__
__x // AVR compiler
#endif
    unsigned char
    USI_TWI_Start_Transceiver_With_Data_Stop(unsigned char *msg, unsigned char msgSize, unsigned char stop)
{
     552:	ff 92       	push	r15
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	16 2f       	mov	r17, r22
     55e:	04 2f       	mov	r16, r20
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:115
	unsigned char tempUSISR_1bit = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC)
	                               |                 // Prepare register value to: Clear flags, and
	                               (0xE << USICNT0); // set USI to shift 1 bit i.e. count 2 clock edges.

	USI_TWI_state.errorState  = 0;
	USI_TWI_state.addressMode = TRUE;
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	20 93 da 00 	sts	0x00DA, r18
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:146
		return (FALSE);
	}
#endif

	if (!(*msg
	      & (1 << TWI_READ_BIT))) // The LSB in the address byte determines if is a masterRead or masterWrite operation.
     566:	fc 01       	movw	r30, r24
     568:	20 81       	ld	r18, Z
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:145
		USI_TWI_state.errorState = USI_TWI_UE_DATA_COL;
		return (FALSE);
	}
#endif

	if (!(*msg
     56a:	20 fd       	sbrc	r18, 0
     56c:	03 c0       	rjmp	.+6      	; 0x574 <USI_TWI_Start_Transceiver_With_Data_Stop+0x22>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:148
	      & (1 << TWI_READ_BIT))) // The LSB in the address byte determines if is a masterRead or masterWrite operation.
	{
		USI_TWI_state.masterWriteDataMode = TRUE;
     56e:	23 e0       	ldi	r18, 0x03	; 3
     570:	20 93 da 00 	sts	0x00DA, r18
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:152
	}

	/* Release SCL to ensure that (repeated) Start can be performed */
	PORT_USI_CL |= (1 << PIN_USI_SCL); // Release SCL.
     574:	c2 9a       	sbi	0x18, 2	; 24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:153 (discriminator 1)
	while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     576:	b2 9b       	sbis	0x16, 2	; 22
     578:	fe cf       	rjmp	.-4      	; 0x576 <USI_TWI_Start_Transceiver_With_Data_Stop+0x24>
_delay_us():
c:\users\ha4ev\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.8.1-arduino5\avr\include\util/delay.h:245
     57a:	fd e0       	ldi	r31, 0x0D	; 13
     57c:	fa 95       	dec	r31
     57e:	f1 f7       	brne	.-4      	; 0x57c <USI_TWI_Start_Transceiver_With_Data_Stop+0x2a>
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:162
#else
	DELAY_T2TWI; // Delay for T2TWI if TWI_STANDARD_MODE
#endif

	/* Generate Start Condition */
	PORT_USI &= ~(1 << PIN_USI_SDA); // Force SDA LOW.
     580:	c0 98       	cbi	0x18, 0	; 24
_delay_us():
c:\users\ha4ev\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.8.1-arduino5\avr\include\util/delay.h:245
     582:	2d e0       	ldi	r18, 0x0D	; 13
     584:	2a 95       	dec	r18
     586:	f1 f7       	brne	.-4      	; 0x584 <USI_TWI_Start_Transceiver_With_Data_Stop+0x32>
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:164
	DELAY_T4TWI;
	PORT_USI_CL &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
     588:	c2 98       	cbi	0x18, 2	; 24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:165
	PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
     58a:	c0 9a       	sbi	0x18, 0	; 24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:168

#ifdef SIGNAL_VERIFY
	if (!(USISR & (1 << USISIF))) {
     58c:	77 99       	sbic	0x0e, 7	; 14
     58e:	02 c0       	rjmp	.+4      	; 0x594 <USI_TWI_Start_Transceiver_With_Data_Stop+0x42>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:169
		USI_TWI_state.errorState = USI_TWI_MISSING_START_CON;
     590:	87 e0       	ldi	r24, 0x07	; 7
     592:	18 c0       	rjmp	.+48     	; 0x5c4 <USI_TWI_Start_Transceiver_With_Data_Stop+0x72>
     594:	ec 01       	movw	r28, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:203
			*(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);

			/* Prepare to generate ACK (or NACK in case of End Of Transmission) */
			if (msgSize == 1) // If transmission of last byte was performed.
			{
				USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
     596:	ff 24       	eor	r15, r15
     598:	fa 94       	dec	r15
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:177
#endif

	/*Write address and Read/Write data */
	do {
		/* If masterWrite cycle (or inital address tranmission)*/
		if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode) {
     59a:	80 91 da 00 	lds	r24, 0x00DA
     59e:	83 70       	andi	r24, 0x03	; 3
     5a0:	f9 f0       	breq	.+62     	; 0x5e0 <USI_TWI_Start_Transceiver_With_Data_Stop+0x8e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:179
			/* Write a byte */
			PORT_USI_CL &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
     5a2:	c2 98       	cbi	0x18, 2	; 24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:180
			USIDR = *(msg++);                        // Setup data.
     5a4:	88 81       	ld	r24, Y
     5a6:	8f b9       	out	0x0f, r24	; 15
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:181
			USI_TWI_Master_Transfer(tempUSISR_8bit); // Send 8 bits on bus.
     5a8:	80 ef       	ldi	r24, 0xF0	; 240
     5aa:	a7 df       	rcall	.-178    	; 0x4fa <USI_TWI_Master_Transfer>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:184

			/* Clock and verify (N)ACK from slave */
			DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     5ac:	b8 98       	cbi	0x17, 0	; 23
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:185
			if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
     5ae:	8e ef       	ldi	r24, 0xFE	; 254
     5b0:	a4 df       	rcall	.-184    	; 0x4fa <USI_TWI_Master_Transfer>
     5b2:	80 ff       	sbrs	r24, 0
     5b4:	0f c0       	rjmp	.+30     	; 0x5d4 <USI_TWI_Start_Transceiver_With_Data_Stop+0x82>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:186
				if (USI_TWI_state.addressMode)
     5b6:	90 91 da 00 	lds	r25, 0x00DA
     5ba:	89 2f       	mov	r24, r25
     5bc:	81 70       	andi	r24, 0x01	; 1
     5be:	90 ff       	sbrs	r25, 0
     5c0:	05 c0       	rjmp	.+10     	; 0x5cc <USI_TWI_Start_Transceiver_With_Data_Stop+0x7a>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:187
					USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
     5c2:	86 e0       	ldi	r24, 0x06	; 6
     5c4:	80 93 da 00 	sts	0x00DA, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:190
				else
					USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
				return (FALSE);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	1c c0       	rjmp	.+56     	; 0x604 <USI_TWI_Start_Transceiver_With_Data_Stop+0xb2>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:189
			DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
			if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
				if (USI_TWI_state.addressMode)
					USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
				else
					USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
     5cc:	95 e0       	ldi	r25, 0x05	; 5
     5ce:	90 93 da 00 	sts	0x00DA, r25
     5d2:	18 c0       	rjmp	.+48     	; 0x604 <USI_TWI_Start_Transceiver_With_Data_Stop+0xb2>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:192
				return (FALSE);
			}
			USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
     5d4:	80 91 da 00 	lds	r24, 0x00DA
     5d8:	8e 7f       	andi	r24, 0xFE	; 254
     5da:	80 93 da 00 	sts	0x00DA, r24
     5de:	0b c0       	rjmp	.+22     	; 0x5f6 <USI_TWI_Start_Transceiver_With_Data_Stop+0xa4>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:197
		}
		/* Else masterRead cycle*/
		else {
			/* Read a data byte */
			DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     5e0:	b8 98       	cbi	0x17, 0	; 23
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:198
			*(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);
     5e2:	80 ef       	ldi	r24, 0xF0	; 240
     5e4:	8a df       	rcall	.-236    	; 0x4fa <USI_TWI_Master_Transfer>
     5e6:	88 83       	st	Y, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:201

			/* Prepare to generate ACK (or NACK in case of End Of Transmission) */
			if (msgSize == 1) // If transmission of last byte was performed.
     5e8:	11 30       	cpi	r17, 0x01	; 1
     5ea:	11 f4       	brne	.+4      	; 0x5f0 <USI_TWI_Start_Transceiver_With_Data_Stop+0x9e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:203
			{
				USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
     5ec:	ff b8       	out	0x0f, r15	; 15
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <USI_TWI_Start_Transceiver_With_Data_Stop+0xa0>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:205
			} else {
				USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
     5f0:	1f b8       	out	0x0f, r1	; 15
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:207
			}
			USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
     5f2:	8e ef       	ldi	r24, 0xFE	; 254
     5f4:	82 df       	rcall	.-252    	; 0x4fa <USI_TWI_Master_Transfer>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:209
		}
	} while (--msgSize); // Until all data sent/received.
     5f6:	11 50       	subi	r17, 0x01	; 1
     5f8:	21 96       	adiw	r28, 0x01	; 1
     5fa:	11 11       	cpse	r17, r1
     5fc:	ce cf       	rjmp	.-100    	; 0x59a <USI_TWI_Start_Transceiver_With_Data_Stop+0x48>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:211

	if (stop) {
     5fe:	01 11       	cpse	r16, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:212
		USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
     600:	92 df       	rcall	.-220    	; 0x526 <USI_TWI_Master_Stop>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:216
	}

	/* Transmission successfully completed*/
	return (TRUE);
     602:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:217
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	08 95       	ret

00000610 <USI_TWI_Transmit_Byte>:
USI_TWI_Transmit_Byte():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:100
// Puts data in the transmission buffer, Waits if buffer is full.
void USI_TWI_Transmit_Byte(unsigned char data)
{
	unsigned char tmphead;

	tmphead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate buffer index.
     610:	90 91 b9 00 	lds	r25, 0x00B9
     614:	9f 5f       	subi	r25, 0xFF	; 255
     616:	9f 70       	andi	r25, 0x0F	; 15
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:101 (discriminator 1)
	while (tmphead == TWI_TxTail)
     618:	20 91 b8 00 	lds	r18, 0x00B8
     61c:	92 17       	cp	r25, r18
     61e:	e1 f3       	breq	.-8      	; 0x618 <USI_TWI_Transmit_Byte+0x8>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:103
		;                         // Wait for free space in buffer.
	TWI_TxBuf[tmphead] = data;    // Store data in buffer.
     620:	e9 2f       	mov	r30, r25
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	e5 51       	subi	r30, 0x15	; 21
     626:	ff 4f       	sbci	r31, 0xFF	; 255
     628:	80 83       	st	Z, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:104
	TWI_TxHead         = tmphead; // Store new index.
     62a:	90 93 b9 00 	sts	0x00B9, r25
     62e:	08 95       	ret

00000630 <USI_TWI_Data_In_Receive_Buffer>:
USI_TWI_Data_In_Receive_Buffer():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:136

// Check if there is data in the receive buffer.
unsigned char USI_TWI_Data_In_Receive_Buffer(void)
{
	unsigned char tmpRxTail;          // Temporary variable to store volatile
	tmpRxTail = TWI_RxTail;           // Not necessary, but prevents warnings
     630:	90 91 ba 00 	lds	r25, 0x00BA
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:137
	return (TWI_RxHead - tmpRxTail) & TWI_RX_BUFFER_MASK; // Return 0 (FALSE) if the receive buffer is empty.
     634:	80 91 bb 00 	lds	r24, 0x00BB
     638:	89 1b       	sub	r24, r25
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:138
}
     63a:	8f 70       	andi	r24, 0x0F	; 15
     63c:	08 95       	ret

0000063e <USI_TWI_Space_In_Transmission_Buffer>:
USI_TWI_Space_In_Transmission_Buffer():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
	unsigned char tmpTxHead;
	tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     63e:	90 91 b9 00 	lds	r25, 0x00B9
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:145
	return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     642:	80 91 b8 00 	lds	r24, 0x00B8
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
	unsigned char tmpTxHead;
	tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     646:	9f 5f       	subi	r25, 0xFF	; 255
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:145
	return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     648:	89 1b       	sub	r24, r25
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:146
}
     64a:	8f 70       	andi	r24, 0x0F	; 15
     64c:	08 95       	ret

0000064e <__vector_13>:
__vector_13():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:165
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	0f 92       	push	r0
     656:	11 24       	eor	r1, r1
     658:	1f 93       	push	r17
     65a:	2f 93       	push	r18
     65c:	3f 93       	push	r19
     65e:	4f 93       	push	r20
     660:	5f 93       	push	r21
     662:	6f 93       	push	r22
     664:	7f 93       	push	r23
     666:	8f 93       	push	r24
     668:	9f 93       	push	r25
     66a:	af 93       	push	r26
     66c:	bf 93       	push	r27
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	ef 93       	push	r30
     674:	ff 93       	push	r31
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:169
	unsigned char tmpPin; // Temporary variable for pin state
	unsigned char tmpRxHead; // Temporary variable to store volatile
	// call slave receive callback on repeated start
	if (USI_TWI_On_Slave_Receive) {
     676:	c0 91 c2 00 	lds	r28, 0x00C2
     67a:	d0 91 c3 00 	lds	r29, 0x00C3
     67e:	20 97       	sbiw	r28, 0x00	; 0
     680:	61 f0       	breq	.+24     	; 0x69a <__vector_13+0x4c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:170
		tmpRxHead = TWI_RxHead;
     682:	10 91 bb 00 	lds	r17, 0x00BB
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:171
		if (TWI_RxTail != tmpRxHead) { // data in receive buffer
     686:	80 91 ba 00 	lds	r24, 0x00BA
     68a:	81 17       	cp	r24, r17
     68c:	31 f0       	breq	.+12     	; 0x69a <__vector_13+0x4c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:172
			USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
     68e:	d0 df       	rcall	.-96     	; 0x630 <USI_TWI_Data_In_Receive_Buffer>
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	fe 01       	movw	r30, r28
     694:	09 95       	icall
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:174
			// reset rx buffer
			TWI_RxTail = tmpRxHead;
     696:	10 93 ba 00 	sts	0x00BA, r17
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:178
		}
	}

	USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
     69a:	10 92 bc 00 	sts	0x00BC, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:179
	DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
     69e:	b8 98       	cbi	0x17, 0	; 23
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:180 (discriminator 1)
	while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
     6a0:	b2 9b       	sbis	0x16, 2	; 22
     6a2:	04 c0       	rjmp	.+8      	; 0x6ac <__vector_13+0x5e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:180 (discriminator 2)
     6a4:	b0 9b       	sbis	0x16, 0	; 22
     6a6:	fc cf       	rjmp	.-8      	; 0x6a0 <__vector_13+0x52>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:185
		; // Wait for SCL to go low to ensure the "Start Condition" has completed.
	      // If a Stop condition arises then leave the interrupt to prevent waiting forever.
	if (tmpPin) {
		// Stop Condition (waiting for next Start Condition)
		USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     6a8:	88 ea       	ldi	r24, 0xA8	; 168
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <__vector_13+0x60>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:192
		                                        // to first Start Condition (potentail failure)
		        (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
		        (0 << USITC);
	} else {
		// really Start Condition (Enable Overflow Interrupt)
		USICR = (1 << USISIE) | (1 << USIOIE)
     6ac:	88 ef       	ldi	r24, 0xF8	; 248
     6ae:	8d b9       	out	0x0d, r24	; 13
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:198
		        | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
		        (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
		        (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
		        (0 << USITC);
	}
	USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
     6b0:	80 ef       	ldi	r24, 0xF0	; 240
     6b2:	8e b9       	out	0x0e, r24	; 14
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:200
	        (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
     6b4:	ff 91       	pop	r31
     6b6:	ef 91       	pop	r30
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	bf 91       	pop	r27
     6be:	af 91       	pop	r26
     6c0:	9f 91       	pop	r25
     6c2:	8f 91       	pop	r24
     6c4:	7f 91       	pop	r23
     6c6:	6f 91       	pop	r22
     6c8:	5f 91       	pop	r21
     6ca:	4f 91       	pop	r20
     6cc:	3f 91       	pop	r19
     6ce:	2f 91       	pop	r18
     6d0:	1f 91       	pop	r17
     6d2:	0f 90       	pop	r0
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	0f 90       	pop	r0
     6d8:	1f 90       	pop	r1
     6da:	18 95       	reti

000006dc <__vector_14>:
__vector_14():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:212
ISR(USI_OVERFLOW_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_OVERFLOW_VECTOR
__interrupt void USI_Counter_Overflow_ISR(void)
#endif
{
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	1f 93       	push	r17
     6e8:	2f 93       	push	r18
     6ea:	3f 93       	push	r19
     6ec:	4f 93       	push	r20
     6ee:	5f 93       	push	r21
     6f0:	6f 93       	push	r22
     6f2:	7f 93       	push	r23
     6f4:	8f 93       	push	r24
     6f6:	9f 93       	push	r25
     6f8:	af 93       	push	r26
     6fa:	bf 93       	push	r27
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	ef 93       	push	r30
     702:	ff 93       	push	r31
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:217
	unsigned char tmpRxHead;
	unsigned char tmpTxTail; // Temporary variables to store volatiles
	unsigned char tmpUSIDR;

	switch (USI_TWI_Overflow_State) {
     704:	80 91 bc 00 	lds	r24, 0x00BC
     708:	82 30       	cpi	r24, 0x02	; 2
     70a:	09 f4       	brne	.+2      	; 0x70e <__vector_14+0x32>
     70c:	4c c0       	rjmp	.+152    	; 0x7a6 <__vector_14+0xca>
     70e:	28 f4       	brcc	.+10     	; 0x71a <__vector_14+0x3e>
     710:	88 23       	and	r24, r24
     712:	59 f0       	breq	.+22     	; 0x72a <__vector_14+0x4e>
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	51 f1       	breq	.+84     	; 0x76c <__vector_14+0x90>
     718:	82 c0       	rjmp	.+260    	; 0x81e <__vector_14+0x142>
     71a:	84 30       	cpi	r24, 0x04	; 4
     71c:	09 f4       	brne	.+2      	; 0x720 <__vector_14+0x44>
     71e:	49 c0       	rjmp	.+146    	; 0x7b2 <__vector_14+0xd6>
     720:	10 f1       	brcs	.+68     	; 0x766 <__vector_14+0x8a>
     722:	85 30       	cpi	r24, 0x05	; 5
     724:	09 f4       	brne	.+2      	; 0x728 <__vector_14+0x4c>
     726:	63 c0       	rjmp	.+198    	; 0x7ee <__vector_14+0x112>
     728:	7a c0       	rjmp	.+244    	; 0x81e <__vector_14+0x142>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:221
	// ---------- Address mode ----------
	// Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
	case USI_SLAVE_CHECK_ADDRESS:
		if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
     72a:	8f b1       	in	r24, 0x0f	; 15
     72c:	88 23       	and	r24, r24
     72e:	31 f0       	breq	.+12     	; 0x73c <__vector_14+0x60>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:221 (discriminator 1)
     730:	8f b1       	in	r24, 0x0f	; 15
     732:	86 95       	lsr	r24
     734:	90 91 bd 00 	lds	r25, 0x00BD
     738:	89 13       	cpse	r24, r25
     73a:	30 c0       	rjmp	.+96     	; 0x79c <__vector_14+0xc0>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:222
			if (USIDR & 0x01) {
     73c:	78 9b       	sbis	0x0f, 0	; 15
     73e:	0d c0       	rjmp	.+26     	; 0x75a <__vector_14+0x7e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:223
				if (USI_TWI_On_Slave_Transmit) {
     740:	e0 91 c4 00 	lds	r30, 0x00C4
     744:	f0 91 c5 00 	lds	r31, 0x00C5
     748:	30 97       	sbiw	r30, 0x00	; 0
     74a:	29 f0       	breq	.+10     	; 0x756 <__vector_14+0x7a>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:225
					// reset tx buffer and call callback
					tmpTxTail = TWI_TxHead;
     74c:	80 91 b9 00 	lds	r24, 0x00B9
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:226
					TWI_TxTail = tmpTxTail;
     750:	80 93 b8 00 	sts	0x00B8, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:227
					USI_TWI_On_Slave_Transmit();
     754:	09 95       	icall
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:229
				}
				USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	01 c0       	rjmp	.+2      	; 0x75c <__vector_14+0x80>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:231
			} else {
				USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     75a:	84 e0       	ldi	r24, 0x04	; 4
     75c:	80 93 bc 00 	sts	0x00BC, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:233
			}
			SET_USI_TO_SEND_ACK();
     760:	1f b8       	out	0x0f, r1	; 15
     762:	b8 9a       	sbi	0x17, 0	; 23
     764:	5a c0       	rjmp	.+180    	; 0x81a <__vector_14+0x13e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:242
		break;

	// ----- Master write data mode ------
	// Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
	case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
		if (USIDR) // If NACK, the master does not want more data.
     766:	8f b1       	in	r24, 0x0f	; 15
     768:	81 11       	cpse	r24, r1
     76a:	18 c0       	rjmp	.+48     	; 0x79c <__vector_14+0xc0>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:253

	// Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
	case USI_SLAVE_SEND_DATA:

		// Get data from Buffer
		tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
     76c:	80 91 b8 00 	lds	r24, 0x00B8
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:254
		if (TWI_TxHead != tmpTxTail) {
     770:	90 91 b9 00 	lds	r25, 0x00B9
     774:	98 17       	cp	r25, r24
     776:	91 f0       	breq	.+36     	; 0x79c <__vector_14+0xc0>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:255
			TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
     778:	80 91 b8 00 	lds	r24, 0x00B8
     77c:	8f 5f       	subi	r24, 0xFF	; 255
     77e:	8f 70       	andi	r24, 0x0F	; 15
     780:	80 93 b8 00 	sts	0x00B8, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:256
			USIDR      = TWI_TxBuf[TWI_TxTail];
     784:	e0 91 b8 00 	lds	r30, 0x00B8
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	e5 51       	subi	r30, 0x15	; 21
     78c:	ff 4f       	sbci	r31, 0xFF	; 255
     78e:	80 81       	ld	r24, Z
     790:	8f b9       	out	0x0f, r24	; 15
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:262
		} else // If the buffer is empty then:
		{
			SET_USI_TO_TWI_START_CONDITION_MODE();
			return;
		}
		USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	80 93 bc 00 	sts	0x00BC, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:263
		SET_USI_TO_SEND_DATA();
     798:	b8 9a       	sbi	0x17, 0	; 23
     79a:	03 c0       	rjmp	.+6      	; 0x7a2 <__vector_14+0xc6>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:259
		if (TWI_TxHead != tmpTxTail) {
			TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
			USIDR      = TWI_TxBuf[TWI_TxTail];
		} else // If the buffer is empty then:
		{
			SET_USI_TO_TWI_START_CONDITION_MODE();
     79c:	b8 98       	cbi	0x17, 0	; 23
     79e:	88 ea       	ldi	r24, 0xA8	; 168
     7a0:	8d b9       	out	0x0d, r24	; 13
     7a2:	80 e7       	ldi	r24, 0x70	; 112
     7a4:	3b c0       	rjmp	.+118    	; 0x81c <__vector_14+0x140>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:268
		SET_USI_TO_SEND_DATA();
		break;

	// Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
	case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
		USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
     7a6:	83 e0       	ldi	r24, 0x03	; 3
     7a8:	80 93 bc 00 	sts	0x00BC, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:269
		SET_USI_TO_READ_ACK();
     7ac:	b8 98       	cbi	0x17, 0	; 23
     7ae:	1f b8       	out	0x0f, r1	; 15
     7b0:	34 c0       	rjmp	.+104    	; 0x81a <__vector_14+0x13e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:275
		break;

	// ----- Master read data mode ------
	// Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
	case USI_SLAVE_REQUEST_DATA:
		USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
     7b2:	85 e0       	ldi	r24, 0x05	; 5
     7b4:	80 93 bc 00 	sts	0x00BC, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:276
		SET_USI_TO_READ_DATA();
     7b8:	b8 98       	cbi	0x17, 0	; 23
     7ba:	80 e7       	ldi	r24, 0x70	; 112
     7bc:	8e b9       	out	0x0e, r24	; 14
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:278
		// call slave receive callback on stop condition
		if (USI_TWI_On_Slave_Receive) {
     7be:	c0 91 c2 00 	lds	r28, 0x00C2
     7c2:	d0 91 c3 00 	lds	r29, 0x00C3
     7c6:	20 97       	sbiw	r28, 0x00	; 0
     7c8:	51 f1       	breq	.+84     	; 0x81e <__vector_14+0x142>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:279
			tmpRxHead = TWI_RxHead;
     7ca:	10 91 bb 00 	lds	r17, 0x00BB
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:280
			if (TWI_RxTail != tmpRxHead) { // data in receive buffer
     7ce:	80 91 ba 00 	lds	r24, 0x00BA
     7d2:	81 17       	cp	r24, r17
     7d4:	21 f1       	breq	.+72     	; 0x81e <__vector_14+0x142>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:282
				// check for stop Condition
				while ((USISR & ((1 << USI_START_COND_INT) | (1 << USIPF) | (0xE << USICNT0))) == 0)
     7d6:	8e b1       	in	r24, 0x0e	; 14
     7d8:	8e 7a       	andi	r24, 0xAE	; 174
     7da:	e9 f3       	breq	.-6      	; 0x7d6 <__vector_14+0xfa>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:285
					;// wait for either Start or Stop Condition
					// cancel after one SCL cycle
				if (USISR & (1 << USIPF)) { // Stop Condition
     7dc:	75 9b       	sbis	0x0e, 5	; 14
     7de:	1f c0       	rjmp	.+62     	; 0x81e <__vector_14+0x142>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:286
					USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
     7e0:	27 df       	rcall	.-434    	; 0x630 <USI_TWI_Data_In_Receive_Buffer>
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	fe 01       	movw	r30, r28
     7e6:	09 95       	icall
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:288
					// reset rx buffer
					TWI_RxTail = tmpRxHead;
     7e8:	10 93 ba 00 	sts	0x00BA, r17
     7ec:	18 c0       	rjmp	.+48     	; 0x81e <__vector_14+0x142>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:297
		break;

	// Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
	case USI_SLAVE_GET_DATA_AND_SEND_ACK:
		// Put data into Buffer
		USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	80 93 bc 00 	sts	0x00BC, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:298
		tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
     7f4:	9f b1       	in	r25, 0x0f	; 15
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:299
		tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
     7f6:	80 91 bb 00 	lds	r24, 0x00BB
     7fa:	8f 5f       	subi	r24, 0xFF	; 255
     7fc:	8f 70       	andi	r24, 0x0F	; 15
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:300
		if (TWI_RxTail != tmpRxHead) {
     7fe:	20 91 ba 00 	lds	r18, 0x00BA
     802:	28 17       	cp	r18, r24
     804:	49 f0       	breq	.+18     	; 0x818 <__vector_14+0x13c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:301
			TWI_RxHead            = tmpRxHead;
     806:	80 93 bb 00 	sts	0x00BB, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:302
			TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
     80a:	e0 91 bb 00 	lds	r30, 0x00BB
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	e5 52       	subi	r30, 0x25	; 37
     812:	ff 4f       	sbci	r31, 0xFF	; 255
     814:	90 83       	st	Z, r25
     816:	a4 cf       	rjmp	.-184    	; 0x760 <__vector_14+0x84>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:306
			SET_USI_TO_SEND_ACK();
		} else // If the buffer is full then:
		{
			SET_USI_TO_SEND_NACK();
     818:	b8 98       	cbi	0x17, 0	; 23
     81a:	8e e7       	ldi	r24, 0x7E	; 126
     81c:	8e b9       	out	0x0e, r24	; 14
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:310
		}
		break;
	}
}
     81e:	ff 91       	pop	r31
     820:	ef 91       	pop	r30
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	bf 91       	pop	r27
     828:	af 91       	pop	r26
     82a:	9f 91       	pop	r25
     82c:	8f 91       	pop	r24
     82e:	7f 91       	pop	r23
     830:	6f 91       	pop	r22
     832:	5f 91       	pop	r21
     834:	4f 91       	pop	r20
     836:	3f 91       	pop	r19
     838:	2f 91       	pop	r18
     83a:	1f 91       	pop	r17
     83c:	0f 90       	pop	r0
     83e:	0f be       	out	0x3f, r0	; 63
     840:	0f 90       	pop	r0
     842:	1f 90       	pop	r1
     844:	18 95       	reti

00000846 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:362
}

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void) {
  BufferIndex = 0;
     846:	10 92 c1 00 	sts	0x00C1, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:363
  BufferLength = 0;
     84a:	10 92 c0 00 	sts	0x00C0, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:365

  transmitting = 0;
     84e:	10 92 bf 00 	sts	0x00BF, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:367

  USI_TWI_Master_Initialise();
     852:	45 ce       	rjmp	.-886    	; 0x4de <USI_TWI_Master_Initialise>

00000854 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:453
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address) {
  // indicate that we are transmitting
  transmitting = 1;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 93 bf 00 	sts	0x00BF, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:455
  // set address of targeted slave and write mode
  Buffer[0] = (address << TWI_ADR_BITS) | (0 << TWI_READ_BIT);
     85a:	e0 91 66 00 	lds	r30, 0x0066
     85e:	f0 91 67 00 	lds	r31, 0x0067
     862:	66 0f       	add	r22, r22
     864:	60 83       	st	Z, r22
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:457
  // reset tx buffer iterator vars
  BufferIndex = 1; // reserved by slave address
     866:	80 93 c1 00 	sts	0x00C1, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:458
  BufferLength = BufferIndex;
     86a:	80 93 c0 00 	sts	0x00C0, r24
     86e:	08 95       	ret

00000870 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:465

void TwoWire::beginTransmission(int address) {
  beginTransmission((uint8_t)address);
}

uint8_t TwoWire::endTransmission(uint8_t sendStop) {
     870:	46 2f       	mov	r20, r22
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:469
  // transmit buffer (blocking)
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer,
                                                         BufferLength,
                                                         sendStop);
     872:	60 91 c0 00 	lds	r22, 0x00C0
     876:	80 91 66 00 	lds	r24, 0x0066
     87a:	90 91 67 00 	lds	r25, 0x0067
     87e:	69 de       	rcall	.-814    	; 0x552 <USI_TWI_Start_Transceiver_With_Data_Stop>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:471
  // reset tx buffer iterator vars
  BufferIndex = 0;
     880:	10 92 c1 00 	sts	0x00C1, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:472
  BufferLength = 0;
     884:	10 92 c0 00 	sts	0x00C0, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:474
  // indicate that we are done transmitting
  transmitting = 0;
     888:	10 92 bf 00 	sts	0x00BF, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:476
  // check for error
  if (ret == FALSE) {
     88c:	81 11       	cpse	r24, r1
     88e:	0e c0       	rjmp	.+28     	; 0x8ac <TwoWire::endTransmission(unsigned char)+0x3c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:477
    switch (USI_TWI_Get_State_Info()) {
     890:	31 de       	rcall	.-926    	; 0x4f4 <USI_TWI_Get_State_Info>
     892:	85 30       	cpi	r24, 0x05	; 5
     894:	29 f0       	breq	.+10     	; 0x8a0 <TwoWire::endTransmission(unsigned char)+0x30>
     896:	86 30       	cpi	r24, 0x06	; 6
     898:	39 f0       	breq	.+14     	; 0x8a8 <TwoWire::endTransmission(unsigned char)+0x38>
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	19 f4       	brne	.+6      	; 0x8a4 <TwoWire::endTransmission(unsigned char)+0x34>
     89e:	08 95       	ret
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:483
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
    case USI_TWI_NO_ACK_ON_ADDRESS:
      return 2; //received NACK on transmit of address
    case USI_TWI_NO_ACK_ON_DATA:
      return 3; //received NACK on transmit of data
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	08 95       	ret
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:485
    }
    return 4; //other error
     8a4:	84 e0       	ldi	r24, 0x04	; 4
     8a6:	08 95       	ret
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:481
  if (ret == FALSE) {
    switch (USI_TWI_Get_State_Info()) {
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
    case USI_TWI_NO_ACK_ON_ADDRESS:
      return 2; //received NACK on transmit of address
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	08 95       	ret
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:487
    case USI_TWI_NO_ACK_ON_DATA:
      return 3; //received NACK on transmit of data
    }
    return 4; //other error
  }
  return 0; //success
     8ac:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:488
}
     8ae:	08 95       	ret

000008b0 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:491

uint8_t TwoWire::endTransmission(void) {
  return endTransmission(true);
     8b0:	61 e0       	ldi	r22, 0x01	; 1
     8b2:	de cf       	rjmp	.-68     	; 0x870 <TwoWire::endTransmission(unsigned char)>

000008b4 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:497
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data) {
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	1f 92       	push	r1
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:498
  if (transmitting) { // in master transmitter mode
     8be:	80 91 bf 00 	lds	r24, 0x00BF
     8c2:	88 23       	and	r24, r24
     8c4:	a9 f0       	breq	.+42     	; 0x8f0 <TwoWire::write(unsigned char)+0x3c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:500
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
     8c6:	80 91 c0 00 	lds	r24, 0x00C0
     8ca:	80 32       	cpi	r24, 0x20	; 32
     8cc:	d8 f4       	brcc	.+54     	; 0x904 <TwoWire::write(unsigned char)+0x50>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:504
      return 0;
    }
    // put byte in tx buffer
    Buffer[BufferIndex] = data;
     8ce:	80 91 c1 00 	lds	r24, 0x00C1
     8d2:	e0 91 66 00 	lds	r30, 0x0066
     8d6:	f0 91 67 00 	lds	r31, 0x0067
     8da:	e8 0f       	add	r30, r24
     8dc:	f1 1d       	adc	r31, r1
     8de:	60 83       	st	Z, r22
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:505
    ++BufferIndex;
     8e0:	80 91 c1 00 	lds	r24, 0x00C1
     8e4:	8f 5f       	subi	r24, 0xFF	; 255
     8e6:	80 93 c1 00 	sts	0x00C1, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:507
    // update amount in buffer
    BufferLength = BufferIndex;
     8ea:	80 93 c0 00 	sts	0x00C0, r24
     8ee:	07 c0       	rjmp	.+14     	; 0x8fe <TwoWire::write(unsigned char)+0x4a>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:510
  } else { // in slave send mode
    // don't bother if buffer is full
    if (!USI_TWI_Space_In_Transmission_Buffer()) {
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	a5 de       	rcall	.-694    	; 0x63e <USI_TWI_Space_In_Transmission_Buffer>
     8f4:	69 81       	ldd	r22, Y+1	; 0x01
     8f6:	88 23       	and	r24, r24
     8f8:	29 f0       	breq	.+10     	; 0x904 <TwoWire::write(unsigned char)+0x50>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:514
      return 0;
    }
    // reply to master
    USI_TWI_Transmit_Byte(data);
     8fa:	86 2f       	mov	r24, r22
     8fc:	89 de       	rcall	.-750    	; 0x610 <USI_TWI_Transmit_Byte>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:516
  }
  return 1;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	02 c0       	rjmp	.+4      	; 0x908 <TwoWire::write(unsigned char)+0x54>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:501
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data) {
  if (transmitting) { // in master transmitter mode
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
      return 0;
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:517
    }
    // reply to master
    USI_TWI_Transmit_Byte(data);
  }
  return 1;
}
     908:	0f 90       	pop	r0
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <SimpleDHT::bits2byte(unsigned char*)>:
_ZN9SimpleDHT9bits2byteEPh():
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:119
    }

    return time;
}

byte SimpleDHT::bits2byte(byte data[8]) {
     910:	27 e0       	ldi	r18, 0x07	; 7
     912:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:120
    byte v = 0;
     914:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:122 (discriminator 2)
    for (int i = 0; i < 8; i++) {
        v += data[i] << (7 - i);
     916:	fb 01       	movw	r30, r22
     918:	41 91       	ld	r20, Z+
     91a:	bf 01       	movw	r22, r30
     91c:	02 2e       	mov	r0, r18
     91e:	01 c0       	rjmp	.+2      	; 0x922 <SimpleDHT::bits2byte(unsigned char*)+0x12>
     920:	44 0f       	add	r20, r20
     922:	0a 94       	dec	r0
     924:	ea f7       	brpl	.-6      	; 0x920 <SimpleDHT::bits2byte(unsigned char*)+0x10>
     926:	84 0f       	add	r24, r20
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	31 09       	sbc	r19, r1
     92c:	a0 f7       	brcc	.-24     	; 0x916 <SimpleDHT::bits2byte(unsigned char*)+0x6>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:125
    }
    return v;
}
     92e:	08 95       	ret

00000930 <SimpleDHT::parse(unsigned char*, short*, short*)>:
_ZN9SimpleDHT5parseEPhPsS1_():
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:127

int SimpleDHT::parse(byte data[40], short* ptemperature, short* phumidity) {
     930:	8f 92       	push	r8
     932:	9f 92       	push	r9
     934:	af 92       	push	r10
     936:	bf 92       	push	r11
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
     94a:	8b 01       	movw	r16, r22
     94c:	6a 01       	movw	r12, r20
     94e:	79 01       	movw	r14, r18
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:128
    short humidity = bits2byte(data);
     950:	e8 81       	ld	r30, Y
     952:	f9 81       	ldd	r31, Y+1	; 0x01
     954:	02 84       	ldd	r0, Z+10	; 0x0a
     956:	f3 85       	ldd	r31, Z+11	; 0x0b
     958:	e0 2d       	mov	r30, r0
     95a:	09 95       	icall
     95c:	b8 2e       	mov	r11, r24
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:129
    short humidity2 = bits2byte(data + 8);
     95e:	e8 81       	ld	r30, Y
     960:	f9 81       	ldd	r31, Y+1	; 0x01
     962:	b8 01       	movw	r22, r16
     964:	68 5f       	subi	r22, 0xF8	; 248
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	02 84       	ldd	r0, Z+10	; 0x0a
     96a:	f3 85       	ldd	r31, Z+11	; 0x0b
     96c:	e0 2d       	mov	r30, r0
     96e:	ce 01       	movw	r24, r28
     970:	09 95       	icall
     972:	a8 2e       	mov	r10, r24
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:130
    short temperature = bits2byte(data + 16);
     974:	e8 81       	ld	r30, Y
     976:	f9 81       	ldd	r31, Y+1	; 0x01
     978:	b8 01       	movw	r22, r16
     97a:	60 5f       	subi	r22, 0xF0	; 240
     97c:	7f 4f       	sbci	r23, 0xFF	; 255
     97e:	02 84       	ldd	r0, Z+10	; 0x0a
     980:	f3 85       	ldd	r31, Z+11	; 0x0b
     982:	e0 2d       	mov	r30, r0
     984:	ce 01       	movw	r24, r28
     986:	09 95       	icall
     988:	98 2e       	mov	r9, r24
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:131
    short temperature2 = bits2byte(data + 24);
     98a:	e8 81       	ld	r30, Y
     98c:	f9 81       	ldd	r31, Y+1	; 0x01
     98e:	b8 01       	movw	r22, r16
     990:	68 5e       	subi	r22, 0xE8	; 232
     992:	7f 4f       	sbci	r23, 0xFF	; 255
     994:	02 84       	ldd	r0, Z+10	; 0x0a
     996:	f3 85       	ldd	r31, Z+11	; 0x0b
     998:	e0 2d       	mov	r30, r0
     99a:	ce 01       	movw	r24, r28
     99c:	09 95       	icall
     99e:	88 2e       	mov	r8, r24
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:132
    byte check = bits2byte(data + 32);
     9a0:	e8 81       	ld	r30, Y
     9a2:	f9 81       	ldd	r31, Y+1	; 0x01
     9a4:	b8 01       	movw	r22, r16
     9a6:	60 5e       	subi	r22, 0xE0	; 224
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	02 84       	ldd	r0, Z+10	; 0x0a
     9ac:	f3 85       	ldd	r31, Z+11	; 0x0b
     9ae:	e0 2d       	mov	r30, r0
     9b0:	ce 01       	movw	r24, r28
     9b2:	09 95       	icall
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:133
    byte expect = (byte)humidity + (byte)humidity2 + (byte)temperature + (byte)temperature2;
     9b4:	9a 2d       	mov	r25, r10
     9b6:	9b 0d       	add	r25, r11
     9b8:	99 0d       	add	r25, r9
     9ba:	98 0d       	add	r25, r8
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:134
    if (check != expect) {
     9bc:	89 13       	cpse	r24, r25
     9be:	0f c0       	rjmp	.+30     	; 0x9de <SimpleDHT::parse(unsigned char*, short*, short*)+0xae>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:138
        return SimpleDHTErrDataChecksum;
    }

    *ptemperature = temperature<<8 | temperature2;
     9c0:	68 2d       	mov	r22, r8
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	79 29       	or	r23, r9
     9c6:	f6 01       	movw	r30, r12
     9c8:	71 83       	std	Z+1, r23	; 0x01
     9ca:	60 83       	st	Z, r22
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:139
    *phumidity = humidity<<8 | humidity2;
     9cc:	4a 2d       	mov	r20, r10
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	5b 29       	or	r21, r11
     9d2:	f7 01       	movw	r30, r14
     9d4:	51 83       	std	Z+1, r21	; 0x01
     9d6:	40 83       	st	Z, r20
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:141

    return SimpleDHTErrSuccess;
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <SimpleDHT::parse(unsigned char*, short*, short*)+0xb2>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:135
    short temperature = bits2byte(data + 16);
    short temperature2 = bits2byte(data + 24);
    byte check = bits2byte(data + 32);
    byte expect = (byte)humidity + (byte)humidity2 + (byte)temperature + (byte)temperature2;
    if (check != expect) {
        return SimpleDHTErrDataChecksum;
     9de:	85 e1       	ldi	r24, 0x15	; 21
     9e0:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:142

    *ptemperature = temperature<<8 | temperature2;
    *phumidity = humidity<<8 | humidity2;

    return SimpleDHTErrSuccess;
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	bf 90       	pop	r11
     9f4:	af 90       	pop	r10
     9f6:	9f 90       	pop	r9
     9f8:	8f 90       	pop	r8
     9fa:	08 95       	ret

000009fc <SimpleDHT::levelTime(unsigned char, int, int)>:
_ZN9SimpleDHT9levelTimeEhii():
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:82
int SimpleDHT::getPort() {
    return port;
}
#endif

long SimpleDHT::levelTime(byte level, int firstWait, int interval) {
     9fc:	7f 92       	push	r7
     9fe:	8f 92       	push	r8
     a00:	9f 92       	push	r9
     a02:	af 92       	push	r10
     a04:	bf 92       	push	r11
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	ec 01       	movw	r28, r24
     a18:	16 2f       	mov	r17, r22
     a1a:	4a 01       	movw	r8, r20
     a1c:	59 01       	movw	r10, r18
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:83
    unsigned long time_start = micros();
     a1e:	86 d5       	rcall	.+2828   	; 0x152c <micros>
     a20:	6b 01       	movw	r12, r22
     a22:	7c 01       	movw	r14, r24
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:87
    long time = 0;

#ifdef __AVR
    uint8_t portState = level ? bitmask : 0;
     a24:	11 23       	and	r17, r17
     a26:	11 f0       	breq	.+4      	; 0xa2c <SimpleDHT::levelTime(unsigned char, int, int)+0x30>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:87 (discriminator 1)
     a28:	78 84       	ldd	r7, Y+8	; 0x08
     a2a:	01 c0       	rjmp	.+2      	; 0xa2e <SimpleDHT::levelTime(unsigned char, int, int)+0x32>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:87
     a2c:	71 2c       	mov	r7, r1
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:91 (discriminator 3)
#endif

    bool loop = true;
    for (int i = 0 ; loop; i++) {
     a2e:	00 e0       	ldi	r16, 0x00	; 0
     a30:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:90 (discriminator 3)

#ifdef __AVR
    uint8_t portState = level ? bitmask : 0;
#endif

    bool loop = true;
     a32:	21 e0       	ldi	r18, 0x01	; 1
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:84 (discriminator 3)
}
#endif

long SimpleDHT::levelTime(byte level, int firstWait, int interval) {
    unsigned long time_start = micros();
    long time = 0;
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	cb 01       	movw	r24, r22
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:91 (discriminator 1)
#ifdef __AVR
    uint8_t portState = level ? bitmask : 0;
#endif

    bool loop = true;
    for (int i = 0 ; loop; i++) {
     a3a:	22 23       	and	r18, r18
     a3c:	71 f1       	breq	.+92     	; 0xa9a <SimpleDHT::levelTime(unsigned char, int, int)+0x9e>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:92
        if (time < 0 || time > levelTimeout) {
     a3e:	97 fd       	sbrc	r25, 7
     a40:	30 c0       	rjmp	.+96     	; 0xaa2 <SimpleDHT::levelTime(unsigned char, int, int)+0xa6>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:92 (discriminator 1)
     a42:	2a 81       	ldd	r18, Y+2	; 0x02
     a44:	3b 81       	ldd	r19, Y+3	; 0x03
     a46:	4c 81       	ldd	r20, Y+4	; 0x04
     a48:	5d 81       	ldd	r21, Y+5	; 0x05
     a4a:	26 17       	cp	r18, r22
     a4c:	37 07       	cpc	r19, r23
     a4e:	48 07       	cpc	r20, r24
     a50:	59 07       	cpc	r21, r25
     a52:	3c f1       	brlt	.+78     	; 0xaa2 <SimpleDHT::levelTime(unsigned char, int, int)+0xa6>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:96
            return -1;
        }

        if (i == 0) {
     a54:	01 15       	cp	r16, r1
     a56:	11 05       	cpc	r17, r1
     a58:	29 f4       	brne	.+10     	; 0xa64 <SimpleDHT::levelTime(unsigned char, int, int)+0x68>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:97
            if (firstWait > 0) {
     a5a:	18 14       	cp	r1, r8
     a5c:	19 04       	cpc	r1, r9
     a5e:	3c f4       	brge	.+14     	; 0xa6e <SimpleDHT::levelTime(unsigned char, int, int)+0x72>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:98
                delayMicroseconds(firstWait);
     a60:	c4 01       	movw	r24, r8
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <SimpleDHT::levelTime(unsigned char, int, int)+0x70>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:100
            }
        } else if (interval > 0) {
     a64:	1a 14       	cp	r1, r10
     a66:	1b 04       	cpc	r1, r11
     a68:	14 f4       	brge	.+4      	; 0xa6e <SimpleDHT::levelTime(unsigned char, int, int)+0x72>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:101
            delayMicroseconds(interval);
     a6a:	c5 01       	movw	r24, r10
     a6c:	ae d5       	rcall	.+2908   	; 0x15ca <delayMicroseconds>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:107
        }

        // for an unsigned int type, the difference have a correct value
        // even if overflow, explanation here:
        //     https://arduino.stackexchange.com/questions/33572/arduino-countdown-without-using-delay
        time = micros() - time_start;
     a6e:	5e d5       	rcall	.+2748   	; 0x152c <micros>
     a70:	6c 19       	sub	r22, r12
     a72:	7d 09       	sbc	r23, r13
     a74:	8e 09       	sbc	r24, r14
     a76:	9f 09       	sbc	r25, r15
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:110

#ifdef __AVR
        loop = ((*portInputRegister(port) & bitmask) == portState);
     a78:	e9 85       	ldd	r30, Y+9	; 0x09
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	ee 0f       	add	r30, r30
     a7e:	ff 1f       	adc	r31, r31
     a80:	ee 57       	subi	r30, 0x7E	; 126
     a82:	ff 4f       	sbci	r31, 0xFF	; 255
     a84:	a5 91       	lpm	r26, Z+
     a86:	b4 91       	lpm	r27, Z
     a88:	3c 91       	ld	r19, X
     a8a:	28 85       	ldd	r18, Y+8	; 0x08
     a8c:	32 23       	and	r19, r18
     a8e:	21 e0       	ldi	r18, 0x01	; 1
     a90:	37 11       	cpse	r19, r7
     a92:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:91
#ifdef __AVR
    uint8_t portState = level ? bitmask : 0;
#endif

    bool loop = true;
    for (int i = 0 ; loop; i++) {
     a94:	0f 5f       	subi	r16, 0xFF	; 255
     a96:	1f 4f       	sbci	r17, 0xFF	; 255
     a98:	d0 cf       	rjmp	.-96     	; 0xa3a <SimpleDHT::levelTime(unsigned char, int, int)+0x3e>
     a9a:	46 2f       	mov	r20, r22
     a9c:	37 2f       	mov	r19, r23
     a9e:	28 2f       	mov	r18, r24
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <SimpleDHT::levelTime(unsigned char, int, int)+0xae>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:93
        if (time < 0 || time > levelTimeout) {
            return -1;
     aa2:	4f ef       	ldi	r20, 0xFF	; 255
     aa4:	3f ef       	ldi	r19, 0xFF	; 255
     aa6:	2f ef       	ldi	r18, 0xFF	; 255
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:117
        loop = (digitalRead(pin) == level);
#endif
    }

    return time;
}
     aaa:	64 2f       	mov	r22, r20
     aac:	73 2f       	mov	r23, r19
     aae:	82 2f       	mov	r24, r18
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	df 90       	pop	r13
     abe:	cf 90       	pop	r12
     ac0:	bf 90       	pop	r11
     ac2:	af 90       	pop	r10
     ac4:	9f 90       	pop	r9
     ac6:	8f 90       	pop	r8
     ac8:	7f 90       	pop	r7
     aca:	08 95       	ret

00000acc <SimpleDHT11::sample(unsigned char*)>:
_ZN11SimpleDHT116sampleEPh():
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:191
int SimpleDHT11::read2(int pin, float* ptemperature, float* phumidity, byte pdata[40]) {
    setPin(pin);
    return read2(ptemperature, phumidity, pdata);
}

int SimpleDHT11::sample(byte data[40]) {
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	ec 01       	movw	r28, r24
     ada:	7b 01       	movw	r14, r22
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:193
    // empty output data.
    memset(data, 0, 40);
     adc:	88 e2       	ldi	r24, 0x28	; 40
     ade:	fb 01       	movw	r30, r22
     ae0:	11 92       	st	Z+, r1
     ae2:	8a 95       	dec	r24
     ae4:	e9 f7       	brne	.-6      	; 0xae0 <SimpleDHT11::sample(unsigned char*)+0x14>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:205
    // Changes in timing done according to:
    //  [2] https://www.mouser.com/ds/2/758/DHT11-Technical-Data-Sheet-Translated-Version-1143054.pdf
    // - original values specified in code
    // - since they were not working (MCU-dependent timing?), replace in code with
    //   _working_ values based on measurements done with levelTimePrecise()
    pinMode(pin, OUTPUT);
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	8e 81       	ldd	r24, Y+6	; 0x06
     aea:	b1 d5       	rcall	.+2914   	; 0x164e <pinMode>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:206
    digitalWrite(pin, LOW);            // 1.
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	8e 81       	ldd	r24, Y+6	; 0x06
     af0:	f8 d5       	rcall	.+3056   	; 0x16e2 <digitalWrite>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:207
    delay(20);                         // specs [2]: 18us
     af2:	64 e1       	ldi	r22, 0x14	; 20
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	3d d5       	rcall	.+2682   	; 0x1576 <delay>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:212

    // Pull high and set to input, before wait 40us.
    // @see https://github.com/winlinvip/SimpleDHT/issues/4
    // @see https://github.com/winlinvip/SimpleDHT/pull/5
    digitalWrite(pin, HIGH);           // 2.
     afc:	61 e0       	ldi	r22, 0x01	; 1
     afe:	8e 81       	ldd	r24, Y+6	; 0x06
     b00:	f0 d5       	rcall	.+3040   	; 0x16e2 <digitalWrite>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:213
    pinMode(pin, INPUT);
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	8e 81       	ldd	r24, Y+6	; 0x06
     b06:	a3 d5       	rcall	.+2886   	; 0x164e <pinMode>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:214
    delayMicroseconds(25);             // specs [2]: 20-40us
     b08:	89 e1       	ldi	r24, 0x19	; 25
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	5e d5       	rcall	.+2748   	; 0x15ca <delayMicroseconds>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:219

    // DHT11 starting:
    //    1. PULL LOW 80us
    //    2. PULL HIGH 80us
    long t = levelTime(LOW);          // 1.
     b0e:	e8 81       	ld	r30, Y
     b10:	f9 81       	ldd	r31, Y+1	; 0x01
     b12:	00 84       	ldd	r0, Z+8	; 0x08
     b14:	f1 85       	ldd	r31, Z+9	; 0x09
     b16:	e0 2d       	mov	r30, r0
     b18:	26 e0       	ldi	r18, 0x06	; 6
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	4a e0       	ldi	r20, 0x0A	; 10
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	ce 01       	movw	r24, r28
     b24:	09 95       	icall
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:220
    if (t < 30) {                    // specs [2]: 80us
     b26:	6e 31       	cpi	r22, 0x1E	; 30
     b28:	71 05       	cpc	r23, r1
     b2a:	81 05       	cpc	r24, r1
     b2c:	91 05       	cpc	r25, r1
     b2e:	34 f4       	brge	.+12     	; 0xb3c <SimpleDHT11::sample(unsigned char*)+0x70>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:221
        return simpleDHTCombileError(t, SimpleDHTErrStartLow);
     b30:	b8 2f       	mov	r27, r24
     b32:	a7 2f       	mov	r26, r23
     b34:	96 2f       	mov	r25, r22
     b36:	88 27       	eor	r24, r24
     b38:	80 61       	ori	r24, 0x10	; 16
     b3a:	6f c0       	rjmp	.+222    	; 0xc1a <SimpleDHT11::sample(unsigned char*)+0x14e>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:224
    }

    t = levelTime(HIGH);             // 2.
     b3c:	e8 81       	ld	r30, Y
     b3e:	f9 81       	ldd	r31, Y+1	; 0x01
     b40:	00 84       	ldd	r0, Z+8	; 0x08
     b42:	f1 85       	ldd	r31, Z+9	; 0x09
     b44:	e0 2d       	mov	r30, r0
     b46:	26 e0       	ldi	r18, 0x06	; 6
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	4a e0       	ldi	r20, 0x0A	; 10
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	ce 01       	movw	r24, r28
     b52:	09 95       	icall
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:225
    if (t < 50) {                    // specs [2]: 80us
     b54:	62 33       	cpi	r22, 0x32	; 50
     b56:	71 05       	cpc	r23, r1
     b58:	81 05       	cpc	r24, r1
     b5a:	91 05       	cpc	r25, r1
     b5c:	34 f4       	brge	.+12     	; 0xb6a <SimpleDHT11::sample(unsigned char*)+0x9e>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:226
        return simpleDHTCombileError(t, SimpleDHTErrStartHigh);
     b5e:	b8 2f       	mov	r27, r24
     b60:	a7 2f       	mov	r26, r23
     b62:	96 2f       	mov	r25, r22
     b64:	88 27       	eor	r24, r24
     b66:	81 61       	ori	r24, 0x11	; 17
     b68:	58 c0       	rjmp	.+176    	; 0xc1a <SimpleDHT11::sample(unsigned char*)+0x14e>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:225
    if (t < 30) {                    // specs [2]: 80us
        return simpleDHTCombileError(t, SimpleDHTErrStartLow);
    }

    t = levelTime(HIGH);             // 2.
    if (t < 50) {                    // specs [2]: 80us
     b6a:	00 e0       	ldi	r16, 0x00	; 0
     b6c:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:235
    //    1. 1bit start, PULL LOW 50us
    //    2. PULL HIGH:
    //         - 26-28us, bit(0)
    //         - 70us, bit(1)
    for (int j = 0; j < 40; j++) {
          t = levelTime(LOW);          // 1.
     b6e:	e8 81       	ld	r30, Y
     b70:	f9 81       	ldd	r31, Y+1	; 0x01
     b72:	00 84       	ldd	r0, Z+8	; 0x08
     b74:	f1 85       	ldd	r31, Z+9	; 0x09
     b76:	e0 2d       	mov	r30, r0
     b78:	26 e0       	ldi	r18, 0x06	; 6
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	4a e0       	ldi	r20, 0x0A	; 10
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	ce 01       	movw	r24, r28
     b84:	09 95       	icall
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:236
          if (t < 24) {                    // specs says: 50us
     b86:	68 31       	cpi	r22, 0x18	; 24
     b88:	71 05       	cpc	r23, r1
     b8a:	81 05       	cpc	r24, r1
     b8c:	91 05       	cpc	r25, r1
     b8e:	34 f4       	brge	.+12     	; 0xb9c <SimpleDHT11::sample(unsigned char*)+0xd0>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:237
              return simpleDHTCombileError(t, SimpleDHTErrDataLow);
     b90:	b8 2f       	mov	r27, r24
     b92:	a7 2f       	mov	r26, r23
     b94:	96 2f       	mov	r25, r22
     b96:	88 27       	eor	r24, r24
     b98:	82 61       	ori	r24, 0x12	; 18
     b9a:	3f c0       	rjmp	.+126    	; 0xc1a <SimpleDHT11::sample(unsigned char*)+0x14e>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:241
          }

          // read a bit
          t = levelTime(HIGH);              // 2.
     b9c:	e8 81       	ld	r30, Y
     b9e:	f9 81       	ldd	r31, Y+1	; 0x01
     ba0:	00 84       	ldd	r0, Z+8	; 0x08
     ba2:	f1 85       	ldd	r31, Z+9	; 0x09
     ba4:	e0 2d       	mov	r30, r0
     ba6:	26 e0       	ldi	r18, 0x06	; 6
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	4a e0       	ldi	r20, 0x0A	; 10
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	ce 01       	movw	r24, r28
     bb2:	09 95       	icall
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:242
          if (t < 11) {                     // specs say: 20us
     bb4:	6b 30       	cpi	r22, 0x0B	; 11
     bb6:	71 05       	cpc	r23, r1
     bb8:	81 05       	cpc	r24, r1
     bba:	91 05       	cpc	r25, r1
     bbc:	34 f4       	brge	.+12     	; 0xbca <SimpleDHT11::sample(unsigned char*)+0xfe>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:243
              return simpleDHTCombileError(t, SimpleDHTErrDataRead);
     bbe:	b8 2f       	mov	r27, r24
     bc0:	a7 2f       	mov	r26, r23
     bc2:	96 2f       	mov	r25, r22
     bc4:	88 27       	eor	r24, r24
     bc6:	83 61       	ori	r24, 0x13	; 19
     bc8:	28 c0       	rjmp	.+80     	; 0xc1a <SimpleDHT11::sample(unsigned char*)+0x14e>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:245
          }
          data[ j ] = (t > 40 ? 1 : 0);     // specs: 26-28us -> 0, 70us -> 1
     bca:	21 e0       	ldi	r18, 0x01	; 1
     bcc:	69 32       	cpi	r22, 0x29	; 41
     bce:	71 05       	cpc	r23, r1
     bd0:	81 05       	cpc	r24, r1
     bd2:	91 05       	cpc	r25, r1
     bd4:	0c f4       	brge	.+2      	; 0xbd8 <SimpleDHT11::sample(unsigned char*)+0x10c>
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	f7 01       	movw	r30, r14
     bda:	21 93       	st	Z+, r18
     bdc:	7f 01       	movw	r14, r30
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:234
    // DHT11 data transmite:
    //    1. 1bit start, PULL LOW 50us
    //    2. PULL HIGH:
    //         - 26-28us, bit(0)
    //         - 70us, bit(1)
    for (int j = 0; j < 40; j++) {
     bde:	0f 5f       	subi	r16, 0xFF	; 255
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
     be2:	08 32       	cpi	r16, 0x28	; 40
     be4:	11 05       	cpc	r17, r1
     be6:	19 f6       	brne	.-122    	; 0xb6e <SimpleDHT11::sample(unsigned char*)+0xa2>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:250
          data[ j ] = (t > 40 ? 1 : 0);     // specs: 26-28us -> 0, 70us -> 1
    }

    // DHT11 EOF:
    //    1. PULL LOW 50us.
    t = levelTime(LOW);                     // 1.
     be8:	e8 81       	ld	r30, Y
     bea:	f9 81       	ldd	r31, Y+1	; 0x01
     bec:	00 84       	ldd	r0, Z+8	; 0x08
     bee:	f1 85       	ldd	r31, Z+9	; 0x09
     bf0:	e0 2d       	mov	r30, r0
     bf2:	26 e0       	ldi	r18, 0x06	; 6
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	4a e0       	ldi	r20, 0x0A	; 10
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	ce 01       	movw	r24, r28
     bfe:	09 95       	icall
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:251
    if (t < 24) {                           // specs say: 50us
     c00:	68 31       	cpi	r22, 0x18	; 24
     c02:	71 05       	cpc	r23, r1
     c04:	81 05       	cpc	r24, r1
     c06:	91 05       	cpc	r25, r1
     c08:	34 f4       	brge	.+12     	; 0xc16 <SimpleDHT11::sample(unsigned char*)+0x14a>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:252
        return simpleDHTCombileError(t, SimpleDHTErrDataEOF);
     c0a:	b8 2f       	mov	r27, r24
     c0c:	a7 2f       	mov	r26, r23
     c0e:	96 2f       	mov	r25, r22
     c10:	88 27       	eor	r24, r24
     c12:	84 61       	ori	r24, 0x14	; 20
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <SimpleDHT11::sample(unsigned char*)+0x14e>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:255
    }

    return SimpleDHTErrSuccess;
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:256
}
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	08 95       	ret

00000c28 <SimpleDHT::read(unsigned char*, unsigned char*, unsigned char*)>:
_ZN9SimpleDHT4readEPhS0_S0_():
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:34

SimpleDHT::SimpleDHT(int pin) {
    setPin(pin);
}

int SimpleDHT::read(byte* ptemperature, byte* phumidity, byte pdata[40]) {
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	28 97       	sbiw	r28, 0x08	; 8
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	6b 01       	movw	r12, r22
     c4a:	7a 01       	movw	r14, r20
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:37
    int ret = SimpleDHTErrSuccess;

    if (pin == -1) {
     c4c:	dc 01       	movw	r26, r24
     c4e:	16 96       	adiw	r26, 0x06	; 6
     c50:	4d 91       	ld	r20, X+
     c52:	5c 91       	ld	r21, X
     c54:	17 97       	sbiw	r26, 0x07	; 7
     c56:	4f 3f       	cpi	r20, 0xFF	; 255
     c58:	5f 4f       	sbci	r21, 0xFF	; 255
     c5a:	71 f1       	breq	.+92     	; 0xcb8 <SimpleDHT::read(unsigned char*, unsigned char*, unsigned char*)+0x90>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:41
        return SimpleDHTErrNoPin;
    }

    float temperature = 0;
     c5c:	1d 82       	std	Y+5, r1	; 0x05
     c5e:	1e 82       	std	Y+6, r1	; 0x06
     c60:	1f 82       	std	Y+7, r1	; 0x07
     c62:	18 86       	std	Y+8, r1	; 0x08
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:42
    float humidity = 0;
     c64:	19 82       	std	Y+1, r1	; 0x01
     c66:	1a 82       	std	Y+2, r1	; 0x02
     c68:	1b 82       	std	Y+3, r1	; 0x03
     c6a:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:43
    if ((ret = read2(&temperature, &humidity, pdata)) != SimpleDHTErrSuccess) {
     c6c:	dc 01       	movw	r26, r24
     c6e:	ed 91       	ld	r30, X+
     c70:	fc 91       	ld	r31, X
     c72:	04 80       	ldd	r0, Z+4	; 0x04
     c74:	f5 81       	ldd	r31, Z+5	; 0x05
     c76:	e0 2d       	mov	r30, r0
     c78:	ae 01       	movw	r20, r28
     c7a:	4f 5f       	subi	r20, 0xFF	; 255
     c7c:	5f 4f       	sbci	r21, 0xFF	; 255
     c7e:	be 01       	movw	r22, r28
     c80:	6b 5f       	subi	r22, 0xFB	; 251
     c82:	7f 4f       	sbci	r23, 0xFF	; 255
     c84:	09 95       	icall
     c86:	8c 01       	movw	r16, r24
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	a1 f4       	brne	.+40     	; 0xcb4 <SimpleDHT::read(unsigned char*, unsigned char*, unsigned char*)+0x8c>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:47
        return ret;
    }

    if (ptemperature) {
     c8c:	c1 14       	cp	r12, r1
     c8e:	d1 04       	cpc	r13, r1
     c90:	39 f0       	breq	.+14     	; 0xca0 <SimpleDHT::read(unsigned char*, unsigned char*, unsigned char*)+0x78>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:48
        *ptemperature = (byte)(int)temperature;
     c92:	6d 81       	ldd	r22, Y+5	; 0x05
     c94:	7e 81       	ldd	r23, Y+6	; 0x06
     c96:	8f 81       	ldd	r24, Y+7	; 0x07
     c98:	98 85       	ldd	r25, Y+8	; 0x08
     c9a:	6b d5       	rcall	.+2774   	; 0x1772 <__fixsfsi>
     c9c:	f6 01       	movw	r30, r12
     c9e:	60 83       	st	Z, r22
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:51
    }

    if (phumidity) {
     ca0:	e1 14       	cp	r14, r1
     ca2:	f1 04       	cpc	r15, r1
     ca4:	39 f0       	breq	.+14     	; 0xcb4 <SimpleDHT::read(unsigned char*, unsigned char*, unsigned char*)+0x8c>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:52
        *phumidity = (byte)(int)humidity;
     ca6:	69 81       	ldd	r22, Y+1	; 0x01
     ca8:	7a 81       	ldd	r23, Y+2	; 0x02
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	9c 81       	ldd	r25, Y+4	; 0x04
     cae:	61 d5       	rcall	.+2754   	; 0x1772 <__fixsfsi>
     cb0:	d7 01       	movw	r26, r14
     cb2:	6c 93       	st	X, r22
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:43
        return SimpleDHTErrNoPin;
    }

    float temperature = 0;
    float humidity = 0;
    if ((ret = read2(&temperature, &humidity, pdata)) != SimpleDHTErrSuccess) {
     cb4:	c8 01       	movw	r24, r16
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <SimpleDHT::read(unsigned char*, unsigned char*, unsigned char*)+0x94>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:38

int SimpleDHT::read(byte* ptemperature, byte* phumidity, byte pdata[40]) {
    int ret = SimpleDHTErrSuccess;

    if (pin == -1) {
        return SimpleDHTErrNoPin;
     cb8:	87 e1       	ldi	r24, 0x17	; 23
     cba:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:56
    if (phumidity) {
        *phumidity = (byte)(int)humidity;
    }

    return ret;
}
     cbc:	28 96       	adiw	r28, 0x08	; 8
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	df 90       	pop	r13
     cd6:	cf 90       	pop	r12
     cd8:	08 95       	ret

00000cda <SimpleDHT11::read2(float*, float*, unsigned char*)>:
_ZN11SimpleDHT115read2EPfS0_Ph():
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:150
}

SimpleDHT11::SimpleDHT11(int pin) : SimpleDHT (pin) {
}

int SimpleDHT11::read2(float* ptemperature, float* phumidity, byte pdata[40]) {
     cda:	8f 92       	push	r8
     cdc:	9f 92       	push	r9
     cde:	af 92       	push	r10
     ce0:	bf 92       	push	r11
     ce2:	cf 92       	push	r12
     ce4:	df 92       	push	r13
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	ac 97       	sbiw	r28, 0x2c	; 44
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	6c 01       	movw	r12, r24
     d04:	7b 01       	movw	r14, r22
     d06:	8a 01       	movw	r16, r20
     d08:	49 01       	movw	r8, r18
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:153
    int ret = SimpleDHTErrSuccess;

    if (pin == -1) {
     d0a:	dc 01       	movw	r26, r24
     d0c:	16 96       	adiw	r26, 0x06	; 6
     d0e:	8d 91       	ld	r24, X+
     d10:	9c 91       	ld	r25, X
     d12:	17 97       	sbiw	r26, 0x07	; 7
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	09 f4       	brne	.+2      	; 0xd1a <SimpleDHT11::read2(float*, float*, unsigned char*)+0x40>
     d18:	64 c0       	rjmp	.+200    	; 0xde2 <SimpleDHT11::read2(float*, float*, unsigned char*)+0x108>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:157
        return SimpleDHTErrNoPin;
    }

    byte data[40] = {0};
     d1a:	fe 01       	movw	r30, r28
     d1c:	31 96       	adiw	r30, 0x01	; 1
     d1e:	5f 01       	movw	r10, r30
     d20:	88 e2       	ldi	r24, 0x28	; 40
     d22:	df 01       	movw	r26, r30
     d24:	1d 92       	st	X+, r1
     d26:	8a 95       	dec	r24
     d28:	e9 f7       	brne	.-6      	; 0xd24 <SimpleDHT11::read2(float*, float*, unsigned char*)+0x4a>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:158
    if ((ret = sample(data)) != SimpleDHTErrSuccess) {
     d2a:	d6 01       	movw	r26, r12
     d2c:	ed 91       	ld	r30, X+
     d2e:	fc 91       	ld	r31, X
     d30:	04 84       	ldd	r0, Z+12	; 0x0c
     d32:	f5 85       	ldd	r31, Z+13	; 0x0d
     d34:	e0 2d       	mov	r30, r0
     d36:	b5 01       	movw	r22, r10
     d38:	c6 01       	movw	r24, r12
     d3a:	09 95       	icall
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	09 f0       	breq	.+2      	; 0xd42 <SimpleDHT11::read2(float*, float*, unsigned char*)+0x68>
     d40:	52 c0       	rjmp	.+164    	; 0xde6 <SimpleDHT11::read2(float*, float*, unsigned char*)+0x10c>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:162
        return ret;
    }

    short temperature = 0;
     d42:	1c a6       	std	Y+44, r1	; 0x2c
     d44:	1b a6       	std	Y+43, r1	; 0x2b
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:163
    short humidity = 0;
     d46:	1a a6       	std	Y+42, r1	; 0x2a
     d48:	19 a6       	std	Y+41, r1	; 0x29
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:164
    if ((ret = parse(data, &temperature, &humidity)) != SimpleDHTErrSuccess) {
     d4a:	d6 01       	movw	r26, r12
     d4c:	ed 91       	ld	r30, X+
     d4e:	fc 91       	ld	r31, X
     d50:	06 84       	ldd	r0, Z+14	; 0x0e
     d52:	f7 85       	ldd	r31, Z+15	; 0x0f
     d54:	e0 2d       	mov	r30, r0
     d56:	9e 01       	movw	r18, r28
     d58:	27 5d       	subi	r18, 0xD7	; 215
     d5a:	3f 4f       	sbci	r19, 0xFF	; 255
     d5c:	ae 01       	movw	r20, r28
     d5e:	45 5d       	subi	r20, 0xD5	; 213
     d60:	5f 4f       	sbci	r21, 0xFF	; 255
     d62:	b5 01       	movw	r22, r10
     d64:	c6 01       	movw	r24, r12
     d66:	09 95       	icall
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	e9 f5       	brne	.+122    	; 0xde6 <SimpleDHT11::read2(float*, float*, unsigned char*)+0x10c>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:168
        return ret;
    }

    if (pdata) {
     d6c:	81 14       	cp	r8, r1
     d6e:	91 04       	cpc	r9, r1
     d70:	39 f0       	breq	.+14     	; 0xd80 <SimpleDHT11::read2(float*, float*, unsigned char*)+0xa6>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:169
        memcpy(pdata, data, 40);
     d72:	88 e2       	ldi	r24, 0x28	; 40
     d74:	f5 01       	movw	r30, r10
     d76:	d4 01       	movw	r26, r8
     d78:	01 90       	ld	r0, Z+
     d7a:	0d 92       	st	X+, r0
     d7c:	8a 95       	dec	r24
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <SimpleDHT11::read2(float*, float*, unsigned char*)+0x9e>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:171
    }
    if (ptemperature) {
     d80:	e1 14       	cp	r14, r1
     d82:	f1 04       	cpc	r15, r1
     d84:	79 f0       	breq	.+30     	; 0xda4 <SimpleDHT11::read2(float*, float*, unsigned char*)+0xca>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:172
        *ptemperature = (int)(temperature>>8);
     d86:	8c a5       	ldd	r24, Y+44	; 0x2c
     d88:	68 2f       	mov	r22, r24
     d8a:	78 2f       	mov	r23, r24
     d8c:	77 0f       	add	r23, r23
     d8e:	77 0b       	sbc	r23, r23
     d90:	88 27       	eor	r24, r24
     d92:	77 fd       	sbrc	r23, 7
     d94:	80 95       	com	r24
     d96:	98 2f       	mov	r25, r24
     d98:	1f d5       	rcall	.+2622   	; 0x17d8 <__floatsisf>
     d9a:	f7 01       	movw	r30, r14
     d9c:	60 83       	st	Z, r22
     d9e:	71 83       	std	Z+1, r23	; 0x01
     da0:	82 83       	std	Z+2, r24	; 0x02
     da2:	93 83       	std	Z+3, r25	; 0x03
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:174
    }
    if (phumidity) {
     da4:	01 15       	cp	r16, r1
     da6:	11 05       	cpc	r17, r1
     da8:	81 f0       	breq	.+32     	; 0xdca <SimpleDHT11::read2(float*, float*, unsigned char*)+0xf0>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:175
        *phumidity = (int)(humidity>>8);
     daa:	8a a5       	ldd	r24, Y+42	; 0x2a
     dac:	68 2f       	mov	r22, r24
     dae:	78 2f       	mov	r23, r24
     db0:	77 0f       	add	r23, r23
     db2:	77 0b       	sbc	r23, r23
     db4:	88 27       	eor	r24, r24
     db6:	77 fd       	sbrc	r23, 7
     db8:	80 95       	com	r24
     dba:	98 2f       	mov	r25, r24
     dbc:	0d d5       	rcall	.+2586   	; 0x17d8 <__floatsisf>
     dbe:	d8 01       	movw	r26, r16
     dc0:	6d 93       	st	X+, r22
     dc2:	7d 93       	st	X+, r23
     dc4:	8d 93       	st	X+, r24
     dc6:	9c 93       	st	X, r25
     dc8:	13 97       	sbiw	r26, 0x03	; 3
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:179
    }

    // For example, when remove the data line, it will be success with zero data.
    if (temperature == 0 && humidity == 0) {
     dca:	8b a5       	ldd	r24, Y+43	; 0x2b
     dcc:	9c a5       	ldd	r25, Y+44	; 0x2c
     dce:	89 2b       	or	r24, r25
     dd0:	31 f4       	brne	.+12     	; 0xdde <SimpleDHT11::read2(float*, float*, unsigned char*)+0x104>
     dd2:	89 a5       	ldd	r24, Y+41	; 0x29
     dd4:	9a a5       	ldd	r25, Y+42	; 0x2a
     dd6:	89 2b       	or	r24, r25
     dd8:	11 f4       	brne	.+4      	; 0xdde <SimpleDHT11::read2(float*, float*, unsigned char*)+0x104>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:180
        return SimpleDHTErrZeroSamples;
     dda:	86 e1       	ldi	r24, 0x16	; 22
     ddc:	03 c0       	rjmp	.+6      	; 0xde4 <SimpleDHT11::read2(float*, float*, unsigned char*)+0x10a>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:179
    if (phumidity) {
        *phumidity = (int)(humidity>>8);
    }

    // For example, when remove the data line, it will be success with zero data.
    if (temperature == 0 && humidity == 0) {
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	01 c0       	rjmp	.+2      	; 0xde4 <SimpleDHT11::read2(float*, float*, unsigned char*)+0x10a>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:154

int SimpleDHT11::read2(float* ptemperature, float* phumidity, byte pdata[40]) {
    int ret = SimpleDHTErrSuccess;

    if (pin == -1) {
        return SimpleDHTErrNoPin;
     de2:	87 e1       	ldi	r24, 0x17	; 23
     de4:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:184
    if (temperature == 0 && humidity == 0) {
        return SimpleDHTErrZeroSamples;
    }

    return ret;
}
     de6:	ac 96       	adiw	r28, 0x2c	; 44
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	df 90       	pop	r13
     e00:	cf 90       	pop	r12
     e02:	bf 90       	pop	r11
     e04:	af 90       	pop	r10
     e06:	9f 90       	pop	r9
     e08:	8f 90       	pop	r8
     e0a:	08 95       	ret

00000e0c <SimpleDHT::SimpleDHT()>:
_ZN9SimpleDHTC2Ev():
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:27
SOFTWARE.
*/

#include "SimpleDHT.h"

SimpleDHT::SimpleDHT() {
     e0c:	fc 01       	movw	r30, r24
     e0e:	8d e7       	ldi	r24, 0x7D	; 125
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	91 83       	std	Z+1, r25	; 0x01
     e14:	80 83       	st	Z, r24
     e16:	40 e4       	ldi	r20, 0x40	; 64
     e18:	5b e4       	ldi	r21, 0x4B	; 75
     e1a:	6c e4       	ldi	r22, 0x4C	; 76
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	42 83       	std	Z+2, r20	; 0x02
     e20:	53 83       	std	Z+3, r21	; 0x03
     e22:	64 83       	std	Z+4, r22	; 0x04
     e24:	75 83       	std	Z+5, r23	; 0x05
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	9f ef       	ldi	r25, 0xFF	; 255
     e2a:	97 83       	std	Z+7, r25	; 0x07
     e2c:	86 83       	std	Z+6, r24	; 0x06
     e2e:	80 87       	std	Z+8, r24	; 0x08
     e30:	81 87       	std	Z+9, r24	; 0x09
     e32:	08 95       	ret

00000e34 <SimpleDHT::setPin(int)>:
_ZN9SimpleDHT6setPinEi():
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:63
int SimpleDHT::read(int pin, byte* ptemperature, byte* phumidity, byte pdata[40]) {
    setPin(pin);
    return read(ptemperature, phumidity, pdata);
}

void SimpleDHT::setPin(int pin) {
     e34:	dc 01       	movw	r26, r24
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:64
    this->pin = pin;
     e36:	17 96       	adiw	r26, 0x07	; 7
     e38:	7c 93       	st	X, r23
     e3a:	6e 93       	st	-X, r22
     e3c:	16 97       	sbiw	r26, 0x06	; 6
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:67
#ifdef __AVR
    // (only AVR) - set low level properties for configured pin
    bitmask = digitalPinToBitMask(pin);
     e3e:	fb 01       	movw	r30, r22
     e40:	ea 58       	subi	r30, 0x8A	; 138
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	e4 91       	lpm	r30, Z
     e46:	18 96       	adiw	r26, 0x08	; 8
     e48:	ec 93       	st	X, r30
     e4a:	18 97       	sbiw	r26, 0x08	; 8
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:68
    port = digitalPinToPort(pin);
     e4c:	fb 01       	movw	r30, r22
     e4e:	e4 58       	subi	r30, 0x84	; 132
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	64 91       	lpm	r22, Z
     e54:	19 96       	adiw	r26, 0x09	; 9
     e56:	6c 93       	st	X, r22
     e58:	08 95       	ret

00000e5a <SimpleDHT::read(int, unsigned char*, unsigned char*, unsigned char*)>:
_ZN9SimpleDHT4readEiPhS0_S0_():
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:58
    }

    return ret;
}

int SimpleDHT::read(int pin, byte* ptemperature, byte* phumidity, byte pdata[40]) {
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	ec 01       	movw	r28, r24
     e6c:	7a 01       	movw	r14, r20
     e6e:	69 01       	movw	r12, r18
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:59
    setPin(pin);
     e70:	e1 df       	rcall	.-62     	; 0xe34 <SimpleDHT::setPin(int)>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:60
    return read(ptemperature, phumidity, pdata);
     e72:	e8 81       	ld	r30, Y
     e74:	f9 81       	ldd	r31, Y+1	; 0x01
     e76:	01 90       	ld	r0, Z+
     e78:	f0 81       	ld	r31, Z
     e7a:	e0 2d       	mov	r30, r0
     e7c:	98 01       	movw	r18, r16
     e7e:	a6 01       	movw	r20, r12
     e80:	b7 01       	movw	r22, r14
     e82:	ce 01       	movw	r24, r28
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:61
}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	cf 90       	pop	r12
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:60
    return ret;
}

int SimpleDHT::read(int pin, byte* ptemperature, byte* phumidity, byte pdata[40]) {
    setPin(pin);
    return read(ptemperature, phumidity, pdata);
     e94:	09 94       	ijmp

00000e96 <SimpleDHT11::read2(int, float*, float*, unsigned char*)>:
_ZN11SimpleDHT115read2EiPfS0_Ph():
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:186
    }

    return ret;
}

int SimpleDHT11::read2(int pin, float* ptemperature, float* phumidity, byte pdata[40]) {
     e96:	cf 92       	push	r12
     e98:	df 92       	push	r13
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ec 01       	movw	r28, r24
     ea8:	7a 01       	movw	r14, r20
     eaa:	69 01       	movw	r12, r18
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:187
    setPin(pin);
     eac:	c3 df       	rcall	.-122    	; 0xe34 <SimpleDHT::setPin(int)>
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:188
    return read2(ptemperature, phumidity, pdata);
     eae:	e8 81       	ld	r30, Y
     eb0:	f9 81       	ldd	r31, Y+1	; 0x01
     eb2:	04 80       	ldd	r0, Z+4	; 0x04
     eb4:	f5 81       	ldd	r31, Z+5	; 0x05
     eb6:	e0 2d       	mov	r30, r0
     eb8:	98 01       	movw	r18, r16
     eba:	a6 01       	movw	r20, r12
     ebc:	b7 01       	movw	r22, r14
     ebe:	ce 01       	movw	r24, r28
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:189
}
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:188
    return ret;
}

int SimpleDHT11::read2(int pin, float* ptemperature, float* phumidity, byte pdata[40]) {
    setPin(pin);
    return read2(ptemperature, phumidity, pdata);
     ed0:	09 94       	ijmp

00000ed2 <SimpleDHT11::SimpleDHT11()>:
_ZN11SimpleDHT11C2Ev():
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:144
    *phumidity = humidity<<8 | humidity2;

    return SimpleDHTErrSuccess;
}

SimpleDHT11::SimpleDHT11() {
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	ec 01       	movw	r28, r24
     ed8:	99 df       	rcall	.-206    	; 0xe0c <SimpleDHT::SimpleDHT()>
     eda:	81 e9       	ldi	r24, 0x91	; 145
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	99 83       	std	Y+1, r25	; 0x01
     ee0:	88 83       	st	Y, r24
C:\Users\ha4ev\Documents\Arduino\libraries\SimpleDHT/SimpleDHT.cpp:145
}
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	08 95       	ret

00000ee8 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     ee8:	cf 92       	push	r12
     eea:	df 92       	push	r13
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	6c 01       	movw	r12, r24
     efa:	7a 01       	movw	r14, r20
     efc:	eb 01       	movw	r28, r22
     efe:	e6 0e       	add	r14, r22
     f00:	f7 1e       	adc	r15, r23
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:35
  size_t n = 0;
     f02:	00 e0       	ldi	r16, 0x00	; 0
     f04:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:36 (discriminator 1)
  while (size--) {
     f06:	ce 15       	cp	r28, r14
     f08:	df 05       	cpc	r29, r15
     f0a:	61 f0       	breq	.+24     	; 0xf24 <Print::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:37
    n += write(*buffer++);
     f0c:	69 91       	ld	r22, Y+
     f0e:	d6 01       	movw	r26, r12
     f10:	ed 91       	ld	r30, X+
     f12:	fc 91       	ld	r31, X
     f14:	01 90       	ld	r0, Z+
     f16:	f0 81       	ld	r31, Z
     f18:	e0 2d       	mov	r30, r0
     f1a:	c6 01       	movw	r24, r12
     f1c:	09 95       	icall
     f1e:	08 0f       	add	r16, r24
     f20:	19 1f       	adc	r17, r25
     f22:	f1 cf       	rjmp	.-30     	; 0xf06 <Print::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:40
  }
  return n;
}
     f24:	c8 01       	movw	r24, r16
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	08 95       	ret

00000f38 <Print::write(char const*)>:
_ZN5Print5writeEPKc():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.h:81
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     f38:	db 01       	movw	r26, r22
     f3a:	0d 90       	ld	r0, X+
     f3c:	00 20       	and	r0, r0
     f3e:	e9 f7       	brne	.-6      	; 0xf3a <Print::write(char const*)+0x2>
     f40:	ad 01       	movw	r20, r26
     f42:	41 50       	subi	r20, 0x01	; 1
     f44:	51 09       	sbc	r21, r1
     f46:	46 1b       	sub	r20, r22
     f48:	57 0b       	sbc	r21, r23
     f4a:	dc 01       	movw	r26, r24
     f4c:	ed 91       	ld	r30, X+
     f4e:	fc 91       	ld	r31, X
     f50:	02 80       	ldd	r0, Z+2	; 0x02
     f52:	f3 81       	ldd	r31, Z+3	; 0x03
     f54:	e0 2d       	mov	r30, r0
     f56:	09 94       	ijmp

00000f58 <Print::print(char)>:
_ZN5Print5printEc():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:58
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     f58:	dc 01       	movw	r26, r24
     f5a:	ed 91       	ld	r30, X+
     f5c:	fc 91       	ld	r31, X
     f5e:	01 90       	ld	r0, Z+
     f60:	f0 81       	ld	r31, Z
     f62:	e0 2d       	mov	r30, r0
     f64:	09 94       	ijmp

00000f66 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:206
}

#ifdef FLASHSTRING_SUPPORT

size_t Print::print(const __FlashStringHelper *ifsh)
{
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	8c 01       	movw	r16, r24
     f74:	7b 01       	movw	r14, r22
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:208
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     f76:	c0 e0       	ldi	r28, 0x00	; 0
     f78:	d0 e0       	ldi	r29, 0x00	; 0
     f7a:	f7 01       	movw	r30, r14
     f7c:	ec 0f       	add	r30, r28
     f7e:	fd 1f       	adc	r31, r29
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:210
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     f80:	64 91       	lpm	r22, Z
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:211
    if (c == 0) break;
     f82:	66 23       	and	r22, r22
     f84:	59 f0       	breq	.+22     	; 0xf9c <Print::print(__FlashStringHelper const*)+0x36>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:212
    if (write(c)) n++;
     f86:	f8 01       	movw	r30, r16
     f88:	a0 81       	ld	r26, Z
     f8a:	b1 81       	ldd	r27, Z+1	; 0x01
     f8c:	ed 91       	ld	r30, X+
     f8e:	fc 91       	ld	r31, X
     f90:	c8 01       	movw	r24, r16
     f92:	09 95       	icall
     f94:	89 2b       	or	r24, r25
     f96:	11 f0       	breq	.+4      	; 0xf9c <Print::print(__FlashStringHelper const*)+0x36>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:212 (discriminator 1)
     f98:	21 96       	adiw	r28, 0x01	; 1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:215 (discriminator 1)
    else break;
  }
  return n;
     f9a:	ef cf       	rjmp	.-34     	; 0xf7a <Print::print(__FlashStringHelper const*)+0x14>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:216
}
     f9c:	ce 01       	movw	r24, r28
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	ef 90       	pop	r14
     faa:	08 95       	ret

00000fac <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:229

#endif

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     fac:	8f 92       	push	r8
     fae:	9f 92       	push	r9
     fb0:	af 92       	push	r10
     fb2:	bf 92       	push	r11
     fb4:	cf 92       	push	r12
     fb6:	df 92       	push	r13
     fb8:	ef 92       	push	r14
     fba:	ff 92       	push	r15
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	a1 97       	sbiw	r28, 0x21	; 33
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	7c 01       	movw	r14, r24
     fd6:	c4 2e       	mov	r12, r20
     fd8:	e5 2f       	mov	r30, r21
     fda:	cb 01       	movw	r24, r22
     fdc:	d2 2e       	mov	r13, r18
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:233
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     fde:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:236

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     fe0:	21 e0       	ldi	r18, 0x01	; 1
     fe2:	2d 15       	cp	r18, r13
     fe4:	10 f0       	brcs	.+4      	; 0xfea <Print::printNumber(unsigned long, unsigned char)+0x3e>
     fe6:	2a e0       	ldi	r18, 0x0A	; 10
     fe8:	d2 2e       	mov	r13, r18
     fea:	8e 01       	movw	r16, r28
     fec:	0f 5d       	subi	r16, 0xDF	; 223
     fee:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:240

  do {
    unsigned long m = n;
    n /= base;
     ff0:	8d 2c       	mov	r8, r13
     ff2:	91 2c       	mov	r9, r1
     ff4:	a1 2c       	mov	r10, r1
     ff6:	b1 2c       	mov	r11, r1
     ff8:	6c 2d       	mov	r22, r12
     ffa:	7e 2f       	mov	r23, r30
     ffc:	a5 01       	movw	r20, r10
     ffe:	94 01       	movw	r18, r8
    1000:	58 d4       	rcall	.+2224   	; 0x18b2 <__udivmodsi4>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:241
    char c = m - base * n;
    1002:	8d 2d       	mov	r24, r13
    1004:	62 2f       	mov	r22, r18
    1006:	4c d4       	rcall	.+2200   	; 0x18a0 <__mulqi3>
    1008:	c8 1a       	sub	r12, r24
    100a:	8c 2d       	mov	r24, r12
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:242
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    100c:	01 50       	subi	r16, 0x01	; 1
    100e:	11 09       	sbc	r17, r1
    1010:	8a 30       	cpi	r24, 0x0A	; 10
    1012:	14 f4       	brge	.+4      	; 0x1018 <Print::printNumber(unsigned long, unsigned char)+0x6c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:242 (discriminator 1)
    1014:	80 5d       	subi	r24, 0xD0	; 208
    1016:	01 c0       	rjmp	.+2      	; 0x101a <Print::printNumber(unsigned long, unsigned char)+0x6e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:242 (discriminator 2)
    1018:	89 5c       	subi	r24, 0xC9	; 201
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:242 (discriminator 3)
    101a:	f8 01       	movw	r30, r16
    101c:	80 83       	st	Z, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:238 (discriminator 3)
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    101e:	21 15       	cp	r18, r1
    1020:	31 05       	cpc	r19, r1
    1022:	41 05       	cpc	r20, r1
    1024:	51 05       	cpc	r21, r1
    1026:	21 f0       	breq	.+8      	; 0x1030 <Print::printNumber(unsigned long, unsigned char)+0x84>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:240
    unsigned long m = n;
    n /= base;
    1028:	c2 2e       	mov	r12, r18
    102a:	e3 2f       	mov	r30, r19
    102c:	ca 01       	movw	r24, r20
    102e:	e4 cf       	rjmp	.-56     	; 0xff8 <Print::printNumber(unsigned long, unsigned char)+0x4c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:245
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1030:	b8 01       	movw	r22, r16
    1032:	c7 01       	movw	r24, r14
    1034:	81 df       	rcall	.-254    	; 0xf38 <Print::write(char const*)>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:246
}
    1036:	a1 96       	adiw	r28, 0x21	; 33
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	bf 90       	pop	r11
    1054:	af 90       	pop	r10
    1056:	9f 90       	pop	r9
    1058:	8f 90       	pop	r8
    105a:	08 95       	ret

0000105c <Print::print(long, int)>:
_ZN5Print5printEli():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:77
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	ec 01       	movw	r28, r24
    106e:	6a 01       	movw	r12, r20
    1070:	7b 01       	movw	r14, r22
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:78
  if (base == 0) {
    1072:	21 15       	cp	r18, r1
    1074:	31 05       	cpc	r19, r1
    1076:	79 f4       	brne	.+30     	; 0x1096 <Print::print(long, int)+0x3a>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:79
    return write(n);
    1078:	e8 81       	ld	r30, Y
    107a:	f9 81       	ldd	r31, Y+1	; 0x01
    107c:	01 90       	ld	r0, Z+
    107e:	f0 81       	ld	r31, Z
    1080:	e0 2d       	mov	r30, r0
    1082:	64 2f       	mov	r22, r20
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:90
    }
    return printNumber(n, 10) + t;
  } else {
    return printNumber(n, base);
  }
}
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:79
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1094:	09 94       	ijmp
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:80
  } else if (base == 10) {
    1096:	2a 30       	cpi	r18, 0x0A	; 10
    1098:	31 05       	cpc	r19, r1
    109a:	01 f5       	brne	.+64     	; 0x10dc <Print::print(long, int)+0x80>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:82
    int t = 0;
    if (n < 0) {
    109c:	77 ff       	sbrs	r23, 7
    109e:	0c c0       	rjmp	.+24     	; 0x10b8 <Print::print(long, int)+0x5c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:83
      t = print('-');
    10a0:	6d e2       	ldi	r22, 0x2D	; 45
    10a2:	5a df       	rcall	.-332    	; 0xf58 <Print::print(char)>
    10a4:	8c 01       	movw	r16, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:84
      n = -n;
    10a6:	f0 94       	com	r15
    10a8:	e0 94       	com	r14
    10aa:	d0 94       	com	r13
    10ac:	c0 94       	com	r12
    10ae:	c1 1c       	adc	r12, r1
    10b0:	d1 1c       	adc	r13, r1
    10b2:	e1 1c       	adc	r14, r1
    10b4:	f1 1c       	adc	r15, r1
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <Print::print(long, int)+0x60>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:81
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    int t = 0;
    10b8:	00 e0       	ldi	r16, 0x00	; 0
    10ba:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:86
    if (n < 0) {
      t = print('-');
      n = -n;
    }
    return printNumber(n, 10) + t;
    10bc:	2a e0       	ldi	r18, 0x0A	; 10
    10be:	b7 01       	movw	r22, r14
    10c0:	a6 01       	movw	r20, r12
    10c2:	ce 01       	movw	r24, r28
    10c4:	73 df       	rcall	.-282    	; 0xfac <Print::printNumber(unsigned long, unsigned char)>
    10c6:	80 0f       	add	r24, r16
    10c8:	91 1f       	adc	r25, r17
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:90
  } else {
    return printNumber(n, base);
  }
}
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	df 90       	pop	r13
    10d8:	cf 90       	pop	r12
    10da:	08 95       	ret
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	cf 90       	pop	r12
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:88
      t = print('-');
      n = -n;
    }
    return printNumber(n, 10) + t;
  } else {
    return printNumber(n, base);
    10ec:	5f cf       	rjmp	.-322    	; 0xfac <Print::printNumber(unsigned long, unsigned char)>

000010ee <Print::print(int, int)>:
_ZN5Print5printEii():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:67
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    10ee:	9a 01       	movw	r18, r20
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Print.cpp:68
  return print((long) n, base);
    10f0:	ab 01       	movw	r20, r22
    10f2:	66 27       	eor	r22, r22
    10f4:	57 fd       	sbrc	r21, 7
    10f6:	60 95       	com	r22
    10f8:	76 2f       	mov	r23, r22
    10fa:	b0 cf       	rjmp	.-160    	; 0x105c <Print::print(long, int)>

000010fc <tone(unsigned char, unsigned long, unsigned long)>:
_Z4tonehmm():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:56
static uint8_t tone_pin = 255;
static unsigned long freq=0;


void tone( uint8_t _pin, unsigned long frequency, unsigned long duration )
{
    10fc:	8f 92       	push	r8
    10fe:	9f 92       	push	r9
    1100:	af 92       	push	r10
    1102:	bf 92       	push	r11
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	c8 2f       	mov	r28, r24
    1116:	6a 01       	movw	r12, r20
    1118:	7b 01       	movw	r14, r22
    111a:	48 01       	movw	r8, r16
    111c:	59 01       	movw	r10, r18
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:57
  if(_pin==tone_pin && freq==frequency&&duration==0) {
    111e:	80 91 68 00 	lds	r24, 0x0068
    1122:	c8 13       	cpse	r28, r24
    1124:	13 c0       	rjmp	.+38     	; 0x114c <tone(unsigned char, unsigned long, unsigned long)+0x50>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:57 (discriminator 1)
    1126:	40 91 c6 00 	lds	r20, 0x00C6
    112a:	50 91 c7 00 	lds	r21, 0x00C7
    112e:	60 91 c8 00 	lds	r22, 0x00C8
    1132:	70 91 c9 00 	lds	r23, 0x00C9
    1136:	4c 15       	cp	r20, r12
    1138:	5d 05       	cpc	r21, r13
    113a:	6e 05       	cpc	r22, r14
    113c:	7f 05       	cpc	r23, r15
    113e:	31 f4       	brne	.+12     	; 0x114c <tone(unsigned char, unsigned long, unsigned long)+0x50>
    1140:	01 15       	cp	r16, r1
    1142:	11 05       	cpc	r17, r1
    1144:	21 05       	cpc	r18, r1
    1146:	31 05       	cpc	r19, r1
    1148:	09 f4       	brne	.+2      	; 0x114c <tone(unsigned char, unsigned long, unsigned long)+0x50>
    114a:	f6 c0       	rjmp	.+492    	; 0x1338 <tone(unsigned char, unsigned long, unsigned long)+0x23c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:60
    return;
  }
  freq=frequency;
    114c:	c0 92 c6 00 	sts	0x00C6, r12
    1150:	d0 92 c7 00 	sts	0x00C7, r13
    1154:	e0 92 c8 00 	sts	0x00C8, r14
    1158:	f0 92 c9 00 	sts	0x00C9, r15
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:62

  if ( tone_pin == 255 )
    115c:	8f 3f       	cpi	r24, 0xFF	; 255
    115e:	99 f5       	brne	.+102    	; 0x11c6 <tone(unsigned char, unsigned long, unsigned long)+0xca>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:104
    TIFR1 |= ((1<<OCF1B) | (1<<OCF1A) | (1<<TOV1));


    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) //START OF ATTINY 85
    // Turn off Clear on Compare Match, turn off PWM A, disconnect the timer from the output pin, stop the clock
    TCCR1 = (0<<CTC1) | (0<<PWM1A) | (0<<COM1A1) | (0<<COM1A0) | (0<<CS13) | (0<<CS12) | (0<<CS11) | (0<<CS10);
    1160:	10 be       	out	0x30, r1	; 48
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:106
    // Turn off PWM A, disconnect the timer from the output pin, no Force Output Compare Match, no Prescaler Reset
    GTCCR &= ~((1<<PWM1B) | (1<<COM1B1) | (1<<COM1B0) | (1<<FOC1B) | (1<<FOC1A) | (1<<PSR1));
    1162:	8c b5       	in	r24, 0x2c	; 44
    1164:	81 78       	andi	r24, 0x81	; 129
    1166:	8c bd       	out	0x2c, r24	; 44
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:108
    // Reset the count to zero
    TCNT1 = 0;
    1168:	1f bc       	out	0x2f, r1	; 47
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:110
    // Set the output compare registers to zero
    OCR1A = 0;
    116a:	1e bc       	out	0x2e, r1	; 46
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:111
    OCR1B = 0;
    116c:	1b bc       	out	0x2b, r1	; 43
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:112
    OCR1C = 0;
    116e:	1d bc       	out	0x2d, r1	; 45
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:114
    // Disable all Timer1 interrupts
    TIMSK &= ~((1<<OCIE1A) | (1<<OCIE1B) | (1<<TOIE1));
    1170:	89 b7       	in	r24, 0x39	; 57
    1172:	8b 79       	andi	r24, 0x9B	; 155
    1174:	89 bf       	out	0x39, r24	; 57
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:116
    // Clear the Timer1 interrupt flags
    TIFR |= ((1<<OCF1A) | (1<<OCF1B) | (1<<TOV1));
    1176:	88 b7       	in	r24, 0x38	; 56
    1178:	84 66       	ori	r24, 0x64	; 100
    117a:	88 bf       	out	0x38, r24	; 56
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:174
  sbi(TCCR1A,WGM01);
  cbi(TCCR1B,WGM02);
    #else
    #if TIMER_TO_USE_FOR_TONE == 1
	#if defined(TCCR1)//START OF ATTINY 85
	sbi(TCCR1,CTC1);
    117c:	80 b7       	in	r24, 0x30	; 48
    117e:	80 68       	ori	r24, 0x80	; 128
    1180:	80 bf       	out	0x30, r24	; 48
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:175
    cbi(TCCR1,PWM1A);
    1182:	80 b7       	in	r24, 0x30	; 48
    1184:	8f 7b       	andi	r24, 0xBF	; 191
    1186:	80 bf       	out	0x30, r24	; 48
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:176
    cbi(GTCCR,PWM1B);
    1188:	8c b5       	in	r24, 0x2c	; 44
    118a:	8f 7b       	andi	r24, 0xBF	; 191
    118c:	8c bd       	out	0x2c, r24	; 44
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:196

    #if (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1E)
    if ( (digitalPinToTimer(_pin) == TIMER1A) || (digitalPinToTimer(_pin) == TIMER1B)  || (digitalPinToTimer(_pin) == TIMER1D) )
    {
    #elif (TIMER_TO_USE_FOR_TONE == 1)
    if ( (digitalPinToTimer(_pin) == TIMER1A) || (digitalPinToTimer(_pin) == TIMER1B) )
    118e:	8c 2f       	mov	r24, r28
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	fc 01       	movw	r30, r24
    1194:	e0 59       	subi	r30, 0x90	; 144
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	24 91       	lpm	r18, Z
    119a:	23 30       	cpi	r18, 0x03	; 3
    119c:	09 f4       	brne	.+2      	; 0x11a0 <tone(unsigned char, unsigned long, unsigned long)+0xa4>
    119e:	8d c0       	rjmp	.+282    	; 0x12ba <tone(unsigned char, unsigned long, unsigned long)+0x1be>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:196 (discriminator 2)
    11a0:	24 91       	lpm	r18, Z
    11a2:	24 30       	cpi	r18, 0x04	; 4
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <tone(unsigned char, unsigned long, unsigned long)+0xac>
    11a6:	a9 c0       	rjmp	.+338    	; 0x12fa <tone(unsigned char, unsigned long, unsigned long)+0x1fe>
    11a8:	88 c0       	rjmp	.+272    	; 0x12ba <tone(unsigned char, unsigned long, unsigned long)+0x1be>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:219
		cbi(TCCR0A,COM0A1);
		sbi(TCCR0A,COM0A0);
      }
      else
	  #endif
	  if (timer == TIMER1A)
    11aa:	e3 30       	cpi	r30, 0x03	; 3
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <tone(unsigned char, unsigned long, unsigned long)+0xb4>
    11ae:	95 c0       	rjmp	.+298    	; 0x12da <tone(unsigned char, unsigned long, unsigned long)+0x1de>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:223
      {
        /* Compare Output Mode = Toggle OC1A on Compare Match. */
		#if defined(TCCR1)
		cbi(TCCR1,COM1A1);
    11b0:	80 b7       	in	r24, 0x30	; 48
    11b2:	8f 7d       	andi	r24, 0xDF	; 223
    11b4:	80 bf       	out	0x30, r24	; 48
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:224
		sbi(TCCR1,COM1A0);
    11b6:	80 b7       	in	r24, 0x30	; 48
    11b8:	80 61       	ori	r24, 0x10	; 16
    11ba:	80 bf       	out	0x30, r24	; 48
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:293 (discriminator 1)
      TCCR1A &= ~((1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0));
	#endif
    }

    /* Ensure the pin is configured for output */
    pinMode( _pin, OUTPUT );
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	8c 2f       	mov	r24, r28
    11c0:	46 d2       	rcall	.+1164   	; 0x164e <pinMode>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:295 (discriminator 1)

    tone_pin = _pin;
    11c2:	c0 93 68 00 	sts	0x0068, r28
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:298
  }

  if ( tone_pin == _pin )
    11c6:	d0 91 68 00 	lds	r29, 0x0068
    11ca:	dc 13       	cpse	r29, r28
    11cc:	b5 c0       	rjmp	.+362    	; 0x1338 <tone(unsigned char, unsigned long, unsigned long)+0x23c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:307
    // Millis timer is always processor clock divided by MillisTimer_Prescale_Value (64)
    #if (TIMER_TO_USE_FOR_TONE == 0)
    TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
    TCNT0 = 0;
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1)
    TCCR1 &= ~((1<<CS13)|(1<<CS12)|(1<<CS11)|(1<<CS10));
    11ce:	80 b7       	in	r24, 0x30	; 48
    11d0:	80 7f       	andi	r24, 0xF0	; 240
    11d2:	80 bf       	out	0x30, r24	; 48
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:308
    TCNT1 = 0;
    11d4:	1f bc       	out	0x2f, r1	; 47
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:317
    #elif (TIMER_TO_USE_FOR_TONE == 1)
    TCCR1B &= ~((1<<CS12)|(1<<CS11)|(1<<CS10));
    TCNT1 = 0;
    #endif

    if ( frequency > 0 )
    11d6:	c1 14       	cp	r12, r1
    11d8:	d1 04       	cpc	r13, r1
    11da:	e1 04       	cpc	r14, r1
    11dc:	f1 04       	cpc	r15, r1
    11de:	09 f4       	brne	.+2      	; 0x11e2 <tone(unsigned char, unsigned long, unsigned long)+0xe6>
    11e0:	57 c0       	rjmp	.+174    	; 0x1290 <tone(unsigned char, unsigned long, unsigned long)+0x194>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:329
  uint32_t ocr = 64000000UL / frequency / 2;
  #else
  #ifdef LOWPLLTIMER1
  uint32_t ocr = 32000000UL / frequency / 2;
  #else 
  uint32_t ocr = F_CPU / frequency / 2;
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	72 e1       	ldi	r23, 0x12	; 18
    11e6:	8a e7       	ldi	r24, 0x7A	; 122
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a7 01       	movw	r20, r14
    11ec:	96 01       	movw	r18, r12
    11ee:	61 d3       	rcall	.+1730   	; 0x18b2 <__udivmodsi4>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:357
          }
        }
      }
	  #else
	   #if defined(TCCR1) //Start FANCY ATtiny85 code
       uint8_t prescalarbits = 0b0001;
    11f0:	c1 e0       	ldi	r28, 0x01	; 1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:358 (discriminator 1)
       while (ocr > 0xff && prescalarbits < 15) {
    11f2:	2f 3f       	cpi	r18, 0xFF	; 255
    11f4:	31 05       	cpc	r19, r1
    11f6:	41 05       	cpc	r20, r1
    11f8:	51 05       	cpc	r21, r1
    11fa:	49 f0       	breq	.+18     	; 0x120e <tone(unsigned char, unsigned long, unsigned long)+0x112>
    11fc:	40 f0       	brcs	.+16     	; 0x120e <tone(unsigned char, unsigned long, unsigned long)+0x112>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:358 (discriminator 2)
    11fe:	cf 30       	cpi	r28, 0x0F	; 15
    1200:	31 f0       	breq	.+12     	; 0x120e <tone(unsigned char, unsigned long, unsigned long)+0x112>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:359
          prescalarbits++;
    1202:	cf 5f       	subi	r28, 0xFF	; 255
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:360
          ocr>>=1;
    1204:	56 95       	lsr	r21
    1206:	47 95       	ror	r20
    1208:	37 95       	ror	r19
    120a:	27 95       	ror	r18
    120c:	f2 cf       	rjmp	.-28     	; 0x11f2 <tone(unsigned char, unsigned long, unsigned long)+0xf6>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:363

       }
       OCR1C=ocr-1;
    120e:	8f ef       	ldi	r24, 0xFF	; 255
    1210:	82 0f       	add	r24, r18
    1212:	8d bd       	out	0x2d, r24	; 45
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:372
        {
         ocr /= 64;
          prescalarbits = 0b011;
        }
      #endif
	   ocr -= 1; //Note we are doing the subtraction of 1 here to save repeatedly calculating ocr from just the frequency in the if tree above 
    1214:	da 01       	movw	r26, r20
    1216:	c9 01       	movw	r24, r18
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	a1 09       	sbc	r26, r1
    121c:	b1 09       	sbc	r27, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:374
      
      OCR1A = ocr;
    121e:	8e bd       	out	0x2e, r24	; 46
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:406
      OCR0A = ocr;

      #endif

      /* Does the caller want a specific duration? */
      if ( duration > 0 )
    1220:	81 14       	cp	r8, r1
    1222:	91 04       	cpc	r9, r1
    1224:	a1 04       	cpc	r10, r1
    1226:	b1 04       	cpc	r11, r1
    1228:	c9 f0       	breq	.+50     	; 0x125c <tone(unsigned char, unsigned long, unsigned long)+0x160>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:409
      {
        /* Determine how many times the value toggles */
        tone_timer_toggle_count = (2 * frequency * duration) / 1000;
    122a:	c5 01       	movw	r24, r10
    122c:	b4 01       	movw	r22, r8
    122e:	66 0f       	add	r22, r22
    1230:	77 1f       	adc	r23, r23
    1232:	88 1f       	adc	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	a7 01       	movw	r20, r14
    1238:	96 01       	movw	r18, r12
    123a:	5f d3       	rcall	.+1726   	; 0x18fa <__umulsidi3>
    123c:	b9 01       	movw	r22, r18
    123e:	ca 01       	movw	r24, r20
    1240:	28 ee       	ldi	r18, 0xE8	; 232
    1242:	33 e0       	ldi	r19, 0x03	; 3
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	34 d3       	rcall	.+1640   	; 0x18b2 <__udivmodsi4>
    124a:	20 93 cd 00 	sts	0x00CD, r18
    124e:	30 93 ce 00 	sts	0x00CE, r19
    1252:	40 93 cf 00 	sts	0x00CF, r20
    1256:	50 93 d0 00 	sts	0x00D0, r21
    125a:	6a c0       	rjmp	.+212    	; 0x1330 <tone(unsigned char, unsigned long, unsigned long)+0x234>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:428
        #endif
      }
      else
      {
        /* Indicate to the interrupt service routine that we'll be running until further notice */
        tone_timer_toggle_count = -1;
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	9f ef       	ldi	r25, 0xFF	; 255
    1260:	dc 01       	movw	r26, r24
    1262:	80 93 cd 00 	sts	0x00CD, r24
    1266:	90 93 ce 00 	sts	0x00CE, r25
    126a:	a0 93 cf 00 	sts	0x00CF, r26
    126e:	b0 93 d0 00 	sts	0x00D0, r27
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:435
        /* All pins but the OCxA / OCxB pins have to be driven by software */
        #if (TIMER_TO_USE_FOR_TONE == 1)
		#if defined(TCCR1E)
        if ( (digitalPinToTimer(_pin) != TIMER1A) && (digitalPinToTimer(_pin) != TIMER1B) && (digitalPinToTimer(_pin) != TIMER1D) )
		#else
        if ( (digitalPinToTimer(_pin) != TIMER1A) && (digitalPinToTimer(_pin) != TIMER1B) )
    1272:	ed 2f       	mov	r30, r29
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	e0 59       	subi	r30, 0x90	; 144
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	84 91       	lpm	r24, Z
    127c:	83 30       	cpi	r24, 0x03	; 3
    127e:	21 f0       	breq	.+8      	; 0x1288 <tone(unsigned char, unsigned long, unsigned long)+0x18c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:435 (discriminator 1)
    1280:	e4 91       	lpm	r30, Z
    1282:	e4 30       	cpi	r30, 0x04	; 4
    1284:	09 f0       	breq	.+2      	; 0x1288 <tone(unsigned char, unsigned long, unsigned long)+0x18c>
    1286:	54 c0       	rjmp	.+168    	; 0x1330 <tone(unsigned char, unsigned long, unsigned long)+0x234>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:462 (discriminator 1)
	  
	  //Clock is always stopped before this point, which means all of CS[0..2] are already 0, so can just use a bitwise OR to set required bits
      #if (TIMER_TO_USE_FOR_TONE == 0)
      TCCR0B |= (prescalarbits << CS00);
      #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1)
      TCCR1 |= (prescalarbits << CS10);
    1288:	80 b7       	in	r24, 0x30	; 48
    128a:	8c 2b       	or	r24, r28
    128c:	80 bf       	out	0x30, r24	; 48
    128e:	54 c0       	rjmp	.+168    	; 0x1338 <tone(unsigned char, unsigned long, unsigned long)+0x23c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:477
      TIMSK1 |= (1<<OCIE0A);
      TIMSK1 &= ~((1<<OCIE0B) | (1<<OCIE0A) | (1<<TOIE0));
      #else
      #if (TIMER_TO_USE_FOR_TONE == 1)
      #if defined (TIMSK)
      TIMSK |= (1<<OCIE1A);
    1290:	89 b7       	in	r24, 0x39	; 57
    1292:	80 64       	ori	r24, 0x40	; 64
    1294:	89 bf       	out	0x39, r24	; 57
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:478
      TIMSK &= ~((1<<TOIE1) | (1<<OCIE1A) | (1<<OCIE1B));
    1296:	89 b7       	in	r24, 0x39	; 57
    1298:	8b 79       	andi	r24, 0x9B	; 155
    129a:	89 bf       	out	0x39, r24	; 57
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:501
      #endif
      #endif
      #endif

      /* Clock is stopped.  Counter is zero.  The only thing left to do is turn off the output. */
      digitalWrite( _pin, 0 );
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	8c 2f       	mov	r24, r28
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:504
    }
  }
}
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	df 90       	pop	r13
    12ae:	cf 90       	pop	r12
    12b0:	bf 90       	pop	r11
    12b2:	af 90       	pop	r10
    12b4:	9f 90       	pop	r9
    12b6:	8f 90       	pop	r8
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:501
      #endif
      #endif
      #endif

      /* Clock is stopped.  Counter is zero.  The only thing left to do is turn off the output. */
      digitalWrite( _pin, 0 );
    12b8:	14 c2       	rjmp	.+1064   	; 0x16e2 <digitalWrite>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:206
    #else
	if (0)
	{ //unsupported, so only use software.
	#endif
      /* Pin toggling is handled by the hardware */
      tone_timer_pin_register = NULL;
    12ba:	10 92 cc 00 	sts	0x00CC, r1
    12be:	10 92 cb 00 	sts	0x00CB, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:207
      tone_timer_pin_mask = 0;
    12c2:	10 92 ca 00 	sts	0x00CA, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:208
      uint8_t timer = digitalPinToTimer(_pin);
    12c6:	e4 91       	lpm	r30, Z
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:211
	  #if defined(COM0A1)
	  //Just in case there are now pwm pins on timer0 (ATTiny861)
      if (timer == TIMER0A)
    12c8:	e1 30       	cpi	r30, 0x01	; 1
    12ca:	09 f0       	breq	.+2      	; 0x12ce <tone(unsigned char, unsigned long, unsigned long)+0x1d2>
    12cc:	6e cf       	rjmp	.-292    	; 0x11aa <tone(unsigned char, unsigned long, unsigned long)+0xae>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:214
      {
        /* Compare Output Mode = Toggle OC0A on Compare Match. */
		cbi(TCCR0A,COM0A1);
    12ce:	8a b5       	in	r24, 0x2a	; 42
    12d0:	8f 77       	andi	r24, 0x7F	; 127
    12d2:	8a bd       	out	0x2a, r24	; 42
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:215
		sbi(TCCR0A,COM0A0);
    12d4:	8a b5       	in	r24, 0x2a	; 42
    12d6:	80 64       	ori	r24, 0x40	; 64
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <tone(unsigned char, unsigned long, unsigned long)+0x1ec>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:235
		sbi(TCCR1A,COM1A0);
		#endif
      }
	  #if defined(COM0B1)
	  //Just in case there are <2 pwm pins on timer0 (ATTiny861)
      else if (timer == TIMER0B)
    12da:	e2 30       	cpi	r30, 0x02	; 2
    12dc:	39 f4       	brne	.+14     	; 0x12ec <tone(unsigned char, unsigned long, unsigned long)+0x1f0>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:238
      {
        /* Compare Output Mode = Toggle OC0B on Compare Match. */
		cbi(TCCR0A,COM0B1);
    12de:	8a b5       	in	r24, 0x2a	; 42
    12e0:	8f 7d       	andi	r24, 0xDF	; 223
    12e2:	8a bd       	out	0x2a, r24	; 42
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:239
		sbi(TCCR0A,COM0B0);
    12e4:	8a b5       	in	r24, 0x2a	; 42
    12e6:	80 61       	ori	r24, 0x10	; 16
    12e8:	8a bd       	out	0x2a, r24	; 42
    12ea:	68 cf       	rjmp	.-304    	; 0x11bc <tone(unsigned char, unsigned long, unsigned long)+0xc0>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:262
	  #endif
      else
      {
        /* Compare Output Mode = Toggle OC1B on Compare Match. */
		#if defined(TCCR1)
		cbi(GTCCR,COM1B1);
    12ec:	8c b5       	in	r24, 0x2c	; 44
    12ee:	8f 7d       	andi	r24, 0xDF	; 223
    12f0:	8c bd       	out	0x2c, r24	; 44
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:263
		sbi(GTCCR,COM1B0);
    12f2:	8c b5       	in	r24, 0x2c	; 44
    12f4:	80 61       	ori	r24, 0x10	; 16
    12f6:	8c bd       	out	0x2c, r24	; 44
    12f8:	61 cf       	rjmp	.-318    	; 0x11bc <tone(unsigned char, unsigned long, unsigned long)+0xc0>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:276
      }
    }
    else
    {
      /* Save information needed by the interrupt service routine */
      tone_timer_pin_register = portOutputRegister( digitalPinToPort( _pin ) );
    12fa:	fc 01       	movw	r30, r24
    12fc:	e4 58       	subi	r30, 0x84	; 132
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	e4 91       	lpm	r30, Z
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	ee 0f       	add	r30, r30
    1306:	ff 1f       	adc	r31, r31
    1308:	e8 57       	subi	r30, 0x78	; 120
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	25 91       	lpm	r18, Z+
    130e:	34 91       	lpm	r19, Z
    1310:	30 93 cc 00 	sts	0x00CC, r19
    1314:	20 93 cb 00 	sts	0x00CB, r18
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:277
      tone_timer_pin_mask = digitalPinToBitMask( _pin );
    1318:	fc 01       	movw	r30, r24
    131a:	ea 58       	subi	r30, 0x8A	; 138
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	84 91       	lpm	r24, Z
    1320:	80 93 ca 00 	sts	0x00CA, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:283

      /* Compare Output Mode = Normal port operation, OCxA disconnected. */
    #if (TIMER_TO_USE_FOR_TONE == 0)
      TCCR0A &= ~((1<<COM0A1)|(1<<COM0A0)|(1<<COM0B1)|(1<<COM0B0));
    #elif (TIMER_TO_USE_FOR_TONE == 1) & defined(TCCR1)
      TCCR1 &= ~((1<<COM1A1)|(1<<COM1A0));
    1324:	80 b7       	in	r24, 0x30	; 48
    1326:	8f 7c       	andi	r24, 0xCF	; 207
    1328:	80 bf       	out	0x30, r24	; 48
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:284
      GTCCR &= ~((1<<COM1B1)|(1<<COM1B0));
    132a:	8c b5       	in	r24, 0x2c	; 44
    132c:	8f 7c       	andi	r24, 0xCF	; 207
    132e:	e3 cf       	rjmp	.-58     	; 0x12f6 <tone(unsigned char, unsigned long, unsigned long)+0x1fa>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:440
        if ( (digitalPinToTimer(_pin) != TIMER1A) && (digitalPinToTimer(_pin) != TIMER1B) )
        #endif
		{
            /* Output Compare A Match Interrupt Enable (software control)*/
            #if defined (TIMSK)
            TIMSK |= (1<<OCIE1A);
    1330:	89 b7       	in	r24, 0x39	; 57
    1332:	80 64       	ori	r24, 0x40	; 64
    1334:	89 bf       	out	0x39, r24	; 57
    1336:	a8 cf       	rjmp	.-176    	; 0x1288 <tone(unsigned char, unsigned long, unsigned long)+0x18c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:504

      /* Clock is stopped.  Counter is zero.  The only thing left to do is turn off the output. */
      digitalWrite( _pin, 0 );
    }
  }
}
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	df 90       	pop	r13
    1346:	cf 90       	pop	r12
    1348:	bf 90       	pop	r11
    134a:	af 90       	pop	r10
    134c:	9f 90       	pop	r9
    134e:	8f 90       	pop	r8
    1350:	08 95       	ret

00001352 <noTone(unsigned char)>:
_Z6noToneh():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:509


void noTone( uint8_t _pin )
{
  if ( (tone_pin != 255) 
    1352:	90 91 68 00 	lds	r25, 0x0068
    1356:	9f 3f       	cpi	r25, 0xFF	; 255
    1358:	11 f1       	breq	.+68     	; 0x139e <noTone(unsigned char)+0x4c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:510
        && ((tone_pin == _pin) || (_pin == 255)) )
    135a:	98 17       	cp	r25, r24
    135c:	11 f0       	breq	.+4      	; 0x1362 <noTone(unsigned char)+0x10>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:510 (discriminator 1)
    135e:	8f 3f       	cpi	r24, 0xFF	; 255
    1360:	f1 f4       	brne	.+60     	; 0x139e <noTone(unsigned char)+0x4c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:520
    TCCR1B &= ~((1<<CS02) | (1<<CS01) | (1<<CS00)); //stop the clock

    #else
    #if (TIMER_TO_USE_FOR_TONE == 1) 
    #if defined (TIMSK)
    TIMSK &= ~((1<<TOIE1) | (1<<OCIE1A) | (1<<OCIE1B));
    1362:	89 b7       	in	r24, 0x39	; 57
    1364:	8b 79       	andi	r24, 0x9B	; 155
    1366:	89 bf       	out	0x39, r24	; 57
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:543
  
    // This just disables the tone. It doesn't reinitialise the PWM modules.
    #if (TIMER_TO_USE_FOR_TONE == 0)
    TCCR0B &= ~((1<<CS02) | (1<<CS01) | (1<<CS00)); //stop the clock
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1)
    TCCR1 &= ~((1<<CS13) | (1<<CS12) | (1<<CS11) | (1<<CS10)); //stop the clock
    1368:	80 b7       	in	r24, 0x30	; 48
    136a:	80 7f       	andi	r24, 0xF0	; 240
    136c:	80 bf       	out	0x30, r24	; 48
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:551
    #elif (TIMER_TO_USE_FOR_TONE == 1)
    TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10)); //stop the clock
    #endif
    #endif
    // Set the output low
    if ( tone_timer_pin_register != NULL )
    136e:	e0 91 cb 00 	lds	r30, 0x00CB
    1372:	f0 91 cc 00 	lds	r31, 0x00CC
    1376:	30 97       	sbiw	r30, 0x00	; 0
    1378:	59 f0       	breq	.+22     	; 0x1390 <noTone(unsigned char)+0x3e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:553
    {
      *tone_timer_pin_register &= ~(tone_timer_pin_mask);
    137a:	20 91 ca 00 	lds	r18, 0x00CA
    137e:	80 81       	ld	r24, Z
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	20 95       	com	r18
    1386:	30 95       	com	r19
    1388:	82 23       	and	r24, r18
    138a:	93 23       	and	r25, r19
    138c:	80 83       	st	Z, r24
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <noTone(unsigned char)+0x46>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:557
    }
    else
    {
      digitalWrite( tone_pin, LOW );
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	80 91 68 00 	lds	r24, 0x0068
    1396:	a5 d1       	rcall	.+842    	; 0x16e2 <digitalWrite>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:560
    }
  
    tone_pin = 255;
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	80 93 68 00 	sts	0x0068, r24
    139e:	08 95       	ret

000013a0 <__vector_3>:
__vector_3():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:572
#elif (TIMER_TO_USE_FOR_TONE == 1)
ISR(TIMER1_COMPA_vect)
#else
#error Tone timer Overflow vector not defined!
#endif
{
    13a0:	1f 92       	push	r1
    13a2:	0f 92       	push	r0
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	0f 92       	push	r0
    13a8:	11 24       	eor	r1, r1
    13aa:	2f 93       	push	r18
    13ac:	3f 93       	push	r19
    13ae:	4f 93       	push	r20
    13b0:	5f 93       	push	r21
    13b2:	6f 93       	push	r22
    13b4:	7f 93       	push	r23
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	af 93       	push	r26
    13bc:	bf 93       	push	r27
    13be:	ef 93       	push	r30
    13c0:	ff 93       	push	r31
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:573
  if ( tone_timer_toggle_count != 0 )
    13c2:	80 91 cd 00 	lds	r24, 0x00CD
    13c6:	90 91 ce 00 	lds	r25, 0x00CE
    13ca:	a0 91 cf 00 	lds	r26, 0x00CF
    13ce:	b0 91 d0 00 	lds	r27, 0x00D0
    13d2:	89 2b       	or	r24, r25
    13d4:	8a 2b       	or	r24, r26
    13d6:	8b 2b       	or	r24, r27
    13d8:	61 f1       	breq	.+88     	; 0x1432 <__vector_3+0x92>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:575
  {
    if ( tone_timer_toggle_count > 0 )
    13da:	80 91 cd 00 	lds	r24, 0x00CD
    13de:	90 91 ce 00 	lds	r25, 0x00CE
    13e2:	a0 91 cf 00 	lds	r26, 0x00CF
    13e6:	b0 91 d0 00 	lds	r27, 0x00D0
    13ea:	18 16       	cp	r1, r24
    13ec:	19 06       	cpc	r1, r25
    13ee:	1a 06       	cpc	r1, r26
    13f0:	1b 06       	cpc	r1, r27
    13f2:	14 f5       	brge	.+68     	; 0x1438 <__vector_3+0x98>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:577
    {
      --tone_timer_toggle_count;
    13f4:	80 91 cd 00 	lds	r24, 0x00CD
    13f8:	90 91 ce 00 	lds	r25, 0x00CE
    13fc:	a0 91 cf 00 	lds	r26, 0x00CF
    1400:	b0 91 d0 00 	lds	r27, 0x00D0
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	a1 09       	sbc	r26, r1
    1408:	b1 09       	sbc	r27, r1
    140a:	80 93 cd 00 	sts	0x00CD, r24
    140e:	90 93 ce 00 	sts	0x00CE, r25
    1412:	a0 93 cf 00 	sts	0x00CF, r26
    1416:	b0 93 d0 00 	sts	0x00D0, r27
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:579

      if ( tone_timer_toggle_count == 0 )
    141a:	80 91 cd 00 	lds	r24, 0x00CD
    141e:	90 91 ce 00 	lds	r25, 0x00CE
    1422:	a0 91 cf 00 	lds	r26, 0x00CF
    1426:	b0 91 d0 00 	lds	r27, 0x00D0
    142a:	89 2b       	or	r24, r25
    142c:	8a 2b       	or	r24, r26
    142e:	8b 2b       	or	r24, r27
    1430:	19 f4       	brne	.+6      	; 0x1438 <__vector_3+0x98>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:582
      {
        // Shutdown the hardware
        noTone( 255 );
    1432:	8f ef       	ldi	r24, 0xFF	; 255
    1434:	8e df       	rcall	.-228    	; 0x1352 <noTone(unsigned char)>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:585

        // Skip the rest.  We're finished.
        return;
    1436:	09 c0       	rjmp	.+18     	; 0x144a <__vector_3+0xaa>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:588
      }
    }
    *tone_timer_pin_register ^= tone_timer_pin_mask;
    1438:	90 91 ca 00 	lds	r25, 0x00CA
    143c:	e0 91 cb 00 	lds	r30, 0x00CB
    1440:	f0 91 cc 00 	lds	r31, 0x00CC
    1444:	80 81       	ld	r24, Z
    1446:	89 27       	eor	r24, r25
    1448:	80 83       	st	Z, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/Tone.cpp:595
  else
  {
    // Shutdown the hardware
    noTone( 255 );
  }
}
    144a:	ff 91       	pop	r31
    144c:	ef 91       	pop	r30
    144e:	bf 91       	pop	r27
    1450:	af 91       	pop	r26
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	7f 91       	pop	r23
    1458:	6f 91       	pop	r22
    145a:	5f 91       	pop	r21
    145c:	4f 91       	pop	r20
    145e:	3f 91       	pop	r19
    1460:	2f 91       	pop	r18
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	0f 90       	pop	r0
    1468:	1f 90       	pop	r1
    146a:	18 95       	reti

0000146c <__cxa_pure_virtual>:
__cxa_pure_virtual():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((weak, __noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    146c:	cc d2       	rcall	.+1432   	; 0x1a06 <abort>

0000146e <main>:
main():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/main.cpp:6
#include <Arduino.h>

int main(void)
{
	#ifdef TUNED_OSCCAL_VALUE
	OSCCAL = TUNED_OSCCAL_VALUE; //set the oscillator calibration value based on the pins_arduino.h file. If this is not set, it will be optimised away
    146e:	81 b7       	in	r24, 0x31	; 49
    1470:	81 bf       	out	0x31, r24	; 49
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/main.cpp:8
    #endif
    init();
    1472:	b6 d0       	rcall	.+364    	; 0x15e0 <init>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/main.cpp:10

	setup();
    1474:	36 d6       	rcall	.+3180   	; 0x20e2 <__data_load_end+0x68e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/main.cpp:13 (discriminator 1)
    
	for (;;)
		loop();
    1476:	94 d6       	rcall	.+3368   	; 0x21a0 <__data_load_end+0x74c>
    1478:	fe cf       	rjmp	.-4      	; 0x1476 <main+0x8>

0000147a <initToneTimerInternal>:
initToneTimerInternal():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:455
  TCCR0B |= (ToneTimer_Prescale_Index << CS00);
  #elif defined(__AVR_ATtiny43__)
  TCCR1A = 3; //WGM 10=1, WGM11=1
  TCCR1B = 3; //prescaler of 64
  #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1)
  TCCR1 &= ~((1<<CS13) | (1<<CS12) | (1<<CS11) | (1<<CS10)); //stop the clock to configure
    147a:	80 b7       	in	r24, 0x30	; 48
    147c:	80 7f       	andi	r24, 0xF0	; 240
    147e:	80 bf       	out	0x30, r24	; 48
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:457
  // Use the Tone Timer for fast PWM as phase correct not supported by this timer
  sbi(TCCR1, CTC1);
    1480:	80 b7       	in	r24, 0x30	; 48
    1482:	80 68       	ori	r24, 0x80	; 128
    1484:	80 bf       	out	0x30, r24	; 48
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:461
  #if !defined(__AVR_ATtiny85__)
  sbi(TCCR1, PWM1A); //for the tiny 85, Timer0 is used instead.
  #endif
  sbi(GTCCR, PWM1B);
    1486:	8c b5       	in	r24, 0x2c	; 44
    1488:	80 64       	ori	r24, 0x40	; 64
    148a:	8c bd       	out	0x2c, r24	; 44
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:462
  OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	8d bd       	out	0x2d, r24	; 45
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:463
  TCCR1 |= (ToneTimer_Prescale_Index << CS10);
    1490:	80 b7       	in	r24, 0x30	; 48
    1492:	87 60       	ori	r24, 0x07	; 7
    1494:	80 bf       	out	0x30, r24	; 48
    1496:	08 95       	ret

00001498 <__vector_5>:
__vector_5():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:128
#else

#error Millis() timer not defined!

#endif
{
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	2f 93       	push	r18
    14a4:	3f 93       	push	r19
    14a6:	8f 93       	push	r24
    14a8:	9f 93       	push	r25
    14aa:	af 93       	push	r26
    14ac:	bf 93       	push	r27
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:131
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
    14ae:	80 91 d2 00 	lds	r24, 0x00D2
    14b2:	90 91 d3 00 	lds	r25, 0x00D3
    14b6:	a0 91 d4 00 	lds	r26, 0x00D4
    14ba:	b0 91 d5 00 	lds	r27, 0x00D5
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:132
  unsigned char f = millis_timer_fract;
    14be:	30 91 d1 00 	lds	r19, 0x00D1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:144
    f -= FRACT_MAX;
    m += 1;
  }
...rmv */

  f += FRACT_INC;
    14c2:	23 e0       	ldi	r18, 0x03	; 3
    14c4:	23 0f       	add	r18, r19
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:146

  if (f >= FRACT_MAX) 
    14c6:	2d 37       	cpi	r18, 0x7D	; 125
    14c8:	30 f0       	brcs	.+12     	; 0x14d6 <__vector_5+0x3e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:148
  {
    f -= FRACT_MAX;
    14ca:	26 e8       	ldi	r18, 0x86	; 134
    14cc:	23 0f       	add	r18, r19
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:150
	m += 1;
    m += MILLIS_INC;
    14ce:	02 96       	adiw	r24, 0x02	; 2
    14d0:	a1 1d       	adc	r26, r1
    14d2:	b1 1d       	adc	r27, r1
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <__vector_5+0x44>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:154
  }
  else
  {
    m += MILLIS_INC;
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	a1 1d       	adc	r26, r1
    14da:	b1 1d       	adc	r27, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:157
  }

  millis_timer_fract = f;
    14dc:	20 93 d1 00 	sts	0x00D1, r18
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:158
  millis_timer_millis = m;
    14e0:	80 93 d2 00 	sts	0x00D2, r24
    14e4:	90 93 d3 00 	sts	0x00D3, r25
    14e8:	a0 93 d4 00 	sts	0x00D4, r26
    14ec:	b0 93 d5 00 	sts	0x00D5, r27
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:159
  millis_timer_overflow_count++;
    14f0:	80 91 d6 00 	lds	r24, 0x00D6
    14f4:	90 91 d7 00 	lds	r25, 0x00D7
    14f8:	a0 91 d8 00 	lds	r26, 0x00D8
    14fc:	b0 91 d9 00 	lds	r27, 0x00D9
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	a1 1d       	adc	r26, r1
    1504:	b1 1d       	adc	r27, r1
    1506:	80 93 d6 00 	sts	0x00D6, r24
    150a:	90 93 d7 00 	sts	0x00D7, r25
    150e:	a0 93 d8 00 	sts	0x00D8, r26
    1512:	b0 93 d9 00 	sts	0x00D9, r27
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:166
  
//MICROSECONDS_PER_MILLIS_OVERFLOW=2048
//MILLIS_INC=2
//FRACT_INC=6
//FRACT_MAX=125
}
    1516:	bf 91       	pop	r27
    1518:	af 91       	pop	r26
    151a:	9f 91       	pop	r25
    151c:	8f 91       	pop	r24
    151e:	3f 91       	pop	r19
    1520:	2f 91       	pop	r18
    1522:	0f 90       	pop	r0
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	0f 90       	pop	r0
    1528:	1f 90       	pop	r1
    152a:	18 95       	reti

0000152c <micros>:
micros():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:185
}

unsigned long micros() 
{
  unsigned long m;
  uint8_t oldSREG = SREG, t;
    152c:	3f b7       	in	r19, 0x3f	; 63
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:187
  
  cli();
    152e:	f8 94       	cli
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:188
  m = millis_timer_overflow_count;
    1530:	80 91 d6 00 	lds	r24, 0x00D6
    1534:	90 91 d7 00 	lds	r25, 0x00D7
    1538:	a0 91 d8 00 	lds	r26, 0x00D8
    153c:	b0 91 d9 00 	lds	r27, 0x00D9
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:190
#if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
  t = TCNT0;
    1540:	22 b7       	in	r18, 0x32	; 50
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:205
  
#if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    m++;
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR & _BV(TOV0)) && (t < 255))
    1542:	08 b6       	in	r0, 0x38	; 56
    1544:	01 fe       	sbrs	r0, 1
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <micros+0x26>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:205 (discriminator 1)
    1548:	2f 3f       	cpi	r18, 0xFF	; 255
    154a:	19 f0       	breq	.+6      	; 0x1552 <micros+0x26>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:206
    m++;
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	a1 1d       	adc	r26, r1
    1550:	b1 1d       	adc	r27, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:215
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
  if ((TIFR & _BV(TOV1)) && (t < 255))
    m++;
#endif

  SREG = oldSREG;
    1552:	3f bf       	out	0x3f, r19	; 63
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:222

#if F_CPU < 1000000L
return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
#else
#if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 ) //Can we just do it the naive way? If so great!
  return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    1554:	66 27       	eor	r22, r22
    1556:	78 2f       	mov	r23, r24
    1558:	89 2f       	mov	r24, r25
    155a:	9a 2f       	mov	r25, r26
    155c:	62 0f       	add	r22, r18
    155e:	71 1d       	adc	r23, r1
    1560:	81 1d       	adc	r24, r1
    1562:	91 1d       	adc	r25, r1
    1564:	42 e0       	ldi	r20, 0x02	; 2
    1566:	66 0f       	add	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	4a 95       	dec	r20
    1570:	d1 f7       	brne	.-12     	; 0x1566 <micros+0x3a>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:267
  //return ((m*(unsigned long)MillisTimer_Prescale_Value / (unsigned long)clockCyclesPerMicrosecond())<<8)+(((unsigned long)t+((m%11)<<8)) * (unsigned long)MillisTimer_Prescale_Value / (unsigned long)clockCyclesPerMicrosecond());
  //This works without the loss of precision, but eats an extra 380 bytes of flash
  //return (((long long)((m << 8) + t)) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()); //very disappointing fix, eats an extra 380 bytes of flash because of long long
#endif
  #endif
}
    1572:	08 95       	ret

00001574 <yield>:
__empty():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:271



static void __empty() {
    1574:	08 95       	ret

00001576 <delay>:
delay():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:277
  // Empty
}
void yield(void) __attribute__ ((weak, alias("__empty")));

void delay(unsigned long ms)
{
    1576:	cf 92       	push	r12
    1578:	df 92       	push	r13
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	6b 01       	movw	r12, r22
    1584:	7c 01       	movw	r14, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:279
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();
    1586:	d2 df       	rcall	.-92     	; 0x152c <micros>
    1588:	eb 01       	movw	r28, r22
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:281 (discriminator 1)

  while (ms > 0) {
    158a:	c1 14       	cp	r12, r1
    158c:	d1 04       	cpc	r13, r1
    158e:	e1 04       	cpc	r14, r1
    1590:	f1 04       	cpc	r15, r1
    1592:	a1 f0       	breq	.+40     	; 0x15bc <delay+0x46>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:282
    yield();
    1594:	ef df       	rcall	.-34     	; 0x1574 <yield>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:283 (discriminator 1)
    while (((uint16_t)micros() - start) >= 1000 && ms) {
    1596:	ca df       	rcall	.-108    	; 0x152c <micros>
    1598:	6c 1b       	sub	r22, r28
    159a:	7d 0b       	sbc	r23, r29
    159c:	68 3e       	cpi	r22, 0xE8	; 232
    159e:	73 40       	sbci	r23, 0x03	; 3
    15a0:	a0 f3       	brcs	.-24     	; 0x158a <delay+0x14>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:283 (discriminator 2)
    15a2:	c1 14       	cp	r12, r1
    15a4:	d1 04       	cpc	r13, r1
    15a6:	e1 04       	cpc	r14, r1
    15a8:	f1 04       	cpc	r15, r1
    15aa:	79 f3       	breq	.-34     	; 0x158a <delay+0x14>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:284
      ms--;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	c8 1a       	sub	r12, r24
    15b0:	d1 08       	sbc	r13, r1
    15b2:	e1 08       	sbc	r14, r1
    15b4:	f1 08       	sbc	r15, r1
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:285
      start += 1000;
    15b6:	c8 51       	subi	r28, 0x18	; 24
    15b8:	dc 4f       	sbci	r29, 0xFC	; 252
    15ba:	ed cf       	rjmp	.-38     	; 0x1596 <delay+0x20>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:293
  #else
  uint32_t start = millis();
  while((millis() - start) < ms)  /* NOP */yield();
  return;
  #endif
}
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	08 95       	ret

000015ca <delayMicroseconds>:
delayMicroseconds():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:346
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    15ca:	82 30       	cpi	r24, 0x02	; 2
    15cc:	91 05       	cpc	r25, r1
    15ce:	38 f0       	brcs	.+14     	; 0x15de <delayMicroseconds+0x14>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:351

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:356

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles, 
    15d8:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:433
	

#endif

	// busy wait
	__asm__ __volatile__ (
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <delayMicroseconds+0x10>
    15de:	08 95       	ret

000015e0 <init>:
init():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:753
  #endif
  #endif

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0) && defined(WGM01)
  sbi(TCCR0A, WGM01);
    15e0:	8a b5       	in	r24, 0x2a	; 42
    15e2:	82 60       	ori	r24, 0x02	; 2
    15e4:	8a bd       	out	0x2a, r24	; 42
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:754
  sbi(TCCR0A, WGM00);
    15e6:	8a b5       	in	r24, 0x2a	; 42
    15e8:	81 60       	ori	r24, 0x01	; 1
    15ea:	8a bd       	out	0x2a, r24	; 42
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:777
  #endif
  
  // Millis timer is always processor clock divided by MillisTimer_Prescale_Value (64)
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
   #ifdef TCCR0B
    TCCR0B = (TCCR0B & ~((1<<CS02)|(1<<CS01)|(1<<CS00))) | (MillisTimer_Prescale_Index << CS00);
    15ec:	83 b7       	in	r24, 0x33	; 51
    15ee:	88 7f       	andi	r24, 0xF8	; 248
    15f0:	83 60       	ori	r24, 0x03	; 3
    15f2:	83 bf       	out	0x33, r24	; 51
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:789
  TCCR1B = (TCCR1B & ~((1<<CS13)|(1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #elif (TIMER_TO_USE_FOR_MILLIS == 1)
  TCCR1B = (TCCR1B & ~((1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #endif
  // this needs to be called before setup() or some functions won't work there
  sei();
    15f4:	78 94       	sei
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:793
  
  // Enable the overlow interrupt (this is the basic system tic-toc for millis)
  #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  sbi(TIMSK, TOIE0);
    15f6:	89 b7       	in	r24, 0x39	; 57
    15f8:	82 60       	ori	r24, 0x02	; 2
    15fa:	89 bf       	out	0x39, r24	; 57
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:806
  #error Millis() Timer overflow interrupt not set correctly
  #endif
  
  // Initialize the timer used for Tone
  #if INITIALIZE_SECONDARY_TIMERS
    initToneTimerInternal();
    15fc:	3e df       	rcall	.-388    	; 0x147a <initToneTimerInternal>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:813

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
  #if defined(ADCSRA)
    // set a2d prescale factor
	ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
    15fe:	86 b1       	in	r24, 0x06	; 6
    1600:	87 68       	ori	r24, 0x87	; 135
    1602:	86 b9       	out	0x06, r24	; 6
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:815
    // enable a2d conversions
    sbi(ADCSRA, ADEN);
    1604:	37 9a       	sbi	0x06, 7	; 6
    1606:	08 95       	ret

00001608 <turnOffPWM>:
turnOffPWM():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
	#if defined(TCCR0A) && defined(COM0A1)
	if( timer == TIMER0A){
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	31 f4       	brne	.+12     	; 0x1618 <turnOffPWM+0x10>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:68
		cbi(TCCR0A, COM0A1);
    160c:	8a b5       	in	r24, 0x2a	; 42
    160e:	8f 77       	andi	r24, 0x7F	; 127
    1610:	8a bd       	out	0x2a, r24	; 42
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:69
		cbi(TCCR0A, COM0A0);
    1612:	8a b5       	in	r24, 0x2a	; 42
    1614:	8f 7b       	andi	r24, 0xBF	; 191
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <turnOffPWM+0x1e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:74
	} else
	#endif

	#if defined(TCCR0A) && defined(COM0B1)
	if( timer == TIMER0B){
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	39 f4       	brne	.+14     	; 0x162a <turnOffPWM+0x22>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:75
		cbi(TCCR0A, COM0B1);
    161c:	8a b5       	in	r24, 0x2a	; 42
    161e:	8f 7d       	andi	r24, 0xDF	; 223
    1620:	8a bd       	out	0x2a, r24	; 42
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:76
		cbi(TCCR0A, COM0B0);
    1622:	8a b5       	in	r24, 0x2a	; 42
    1624:	8f 7e       	andi	r24, 0xEF	; 239
    1626:	8a bd       	out	0x2a, r24	; 42
    1628:	08 95       	ret
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:105
		cbi(TCCR1C,COM1D0);
		//cbi(TCCR1A,PWM1D);
	} else
    #endif
	#if defined(TCCR1) && defined(COM1A1)
	if(timer == TIMER1A){
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	39 f4       	brne	.+14     	; 0x163c <turnOffPWM+0x34>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:106
		cbi(TCCR1, COM1A1);
    162e:	80 b7       	in	r24, 0x30	; 48
    1630:	8f 7d       	andi	r24, 0xDF	; 223
    1632:	80 bf       	out	0x30, r24	; 48
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:107
		cbi(TCCR1, COM1A0);
    1634:	80 b7       	in	r24, 0x30	; 48
    1636:	8f 7e       	andi	r24, 0xEF	; 239
    1638:	80 bf       	out	0x30, r24	; 48
    163a:	08 95       	ret
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:125
	#endif
	} else
	#endif

	#if defined(TCCR1) && defined(COM1B1)
	if( timer == TIMER1B){
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	31 f4       	brne	.+12     	; 0x164c <turnOffPWM+0x44>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:126
		cbi(GTCCR, COM1B1);
    1640:	8c b5       	in	r24, 0x2c	; 44
    1642:	8f 7d       	andi	r24, 0xDF	; 223
    1644:	8c bd       	out	0x2c, r24	; 44
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:127
		cbi(GTCCR, COM1B0);
    1646:	8c b5       	in	r24, 0x2c	; 44
    1648:	8f 7e       	andi	r24, 0xEF	; 239
    164a:	8c bd       	out	0x2c, r24	; 44
    164c:	08 95       	ret

0000164e <pinMode>:
pinMode():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:33
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:34
	if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
    1652:	87 ff       	sbrs	r24, 7
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <pinMode+0x26>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:34 (discriminator 1)
    1656:	8f 77       	andi	r24, 0x7F	; 127
    1658:	41 f0       	breq	.+16     	; 0x166a <pinMode+0x1c>
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	41 f0       	breq	.+16     	; 0x166e <pinMode+0x20>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:34 (discriminator 3)
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	41 f0       	breq	.+16     	; 0x1672 <pinMode+0x24>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:34 (discriminator 5)
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	39 f0       	breq	.+14     	; 0x1674 <pinMode+0x26>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:34
    1666:	8f ef       	ldi	r24, 0xFF	; 255
    1668:	05 c0       	rjmp	.+10     	; 0x1674 <pinMode+0x26>
    166a:	85 e0       	ldi	r24, 0x05	; 5
    166c:	03 c0       	rjmp	.+6      	; 0x1674 <pinMode+0x26>
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	01 c0       	rjmp	.+2      	; 0x1674 <pinMode+0x26>
    1672:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:35
	uint8_t bit = digitalPinToBitMask(pin);
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	fc 01       	movw	r30, r24
    1678:	ea 58       	subi	r30, 0x8A	; 138
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	24 91       	lpm	r18, Z
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:36
	uint8_t port = digitalPinToPort(pin);
    167e:	fc 01       	movw	r30, r24
    1680:	e4 58       	subi	r30, 0x84	; 132
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	84 91       	lpm	r24, Z
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:39
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1686:	88 23       	and	r24, r24
    1688:	49 f1       	breq	.+82     	; 0x16dc <pinMode+0x8e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:41

	reg = portModeRegister(port);
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	fc 01       	movw	r30, r24
    1692:	e2 57       	subi	r30, 0x72	; 114
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	a5 91       	lpm	r26, Z+
    1698:	b4 91       	lpm	r27, Z
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:42
	out = portOutputRegister(port);
    169a:	88 57       	subi	r24, 0x78	; 120
    169c:	9f 4f       	sbci	r25, 0xFF	; 255
    169e:	fc 01       	movw	r30, r24
    16a0:	c5 91       	lpm	r28, Z+
    16a2:	d4 91       	lpm	r29, Z
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:45

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    16a4:	9f b7       	in	r25, 0x3f	; 63
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:44
	if (port == NOT_A_PIN) return;

	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
    16a6:	61 11       	cpse	r22, r1
    16a8:	08 c0       	rjmp	.+16     	; 0x16ba <pinMode+0x6c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:46
		uint8_t oldSREG = SREG;
                cli();
    16aa:	f8 94       	cli
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:47
		*reg &= ~bit;
    16ac:	8c 91       	ld	r24, X
    16ae:	20 95       	com	r18
    16b0:	82 23       	and	r24, r18
    16b2:	8c 93       	st	X, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:48
		*out &= ~bit;
    16b4:	88 81       	ld	r24, Y
    16b6:	82 23       	and	r24, r18
    16b8:	0a c0       	rjmp	.+20     	; 0x16ce <pinMode+0x80>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:50
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    16ba:	62 30       	cpi	r22, 0x02	; 2
    16bc:	51 f4       	brne	.+20     	; 0x16d2 <pinMode+0x84>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:52
		uint8_t oldSREG = SREG;
                cli();
    16be:	f8 94       	cli
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:53
		*reg &= ~bit;
    16c0:	8c 91       	ld	r24, X
    16c2:	32 2f       	mov	r19, r18
    16c4:	30 95       	com	r19
    16c6:	83 23       	and	r24, r19
    16c8:	8c 93       	st	X, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:54
		*out |= bit;
    16ca:	88 81       	ld	r24, Y
    16cc:	82 2b       	or	r24, r18
    16ce:	88 83       	st	Y, r24
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <pinMode+0x8c>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:58
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
    16d2:	f8 94       	cli
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:59
		*reg |= bit;
    16d4:	8c 91       	ld	r24, X
    16d6:	82 2b       	or	r24, r18
    16d8:	8c 93       	st	X, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:60
		SREG = oldSREG;
    16da:	9f bf       	out	0x3f, r25	; 63
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:62
	}
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	08 95       	ret

000016e2 <digitalWrite>:
digitalWrite():
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:137
    }

}

void digitalWrite(uint8_t pin, uint8_t val)
{
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	1f 92       	push	r1
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:138
	if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
    16f0:	87 ff       	sbrs	r24, 7
    16f2:	0f c0       	rjmp	.+30     	; 0x1712 <digitalWrite+0x30>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:138 (discriminator 1)
    16f4:	8f 77       	andi	r24, 0x7F	; 127
    16f6:	41 f0       	breq	.+16     	; 0x1708 <digitalWrite+0x26>
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	41 f0       	breq	.+16     	; 0x170c <digitalWrite+0x2a>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:138 (discriminator 3)
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	41 f0       	breq	.+16     	; 0x1710 <digitalWrite+0x2e>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:138 (discriminator 5)
    1700:	83 30       	cpi	r24, 0x03	; 3
    1702:	39 f0       	breq	.+14     	; 0x1712 <digitalWrite+0x30>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:138
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	05 c0       	rjmp	.+10     	; 0x1712 <digitalWrite+0x30>
    1708:	85 e0       	ldi	r24, 0x05	; 5
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <digitalWrite+0x30>
    170c:	82 e0       	ldi	r24, 0x02	; 2
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <digitalWrite+0x30>
    1710:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:139
	uint8_t timer = digitalPinToTimer(pin);
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	f9 01       	movw	r30, r18
    1718:	e0 59       	subi	r30, 0x90	; 144
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	84 91       	lpm	r24, Z
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:140
	uint8_t bit = digitalPinToBitMask(pin);
    171e:	f9 01       	movw	r30, r18
    1720:	ea 58       	subi	r30, 0x8A	; 138
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	14 91       	lpm	r17, Z
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:141
	uint8_t port = digitalPinToPort(pin);
    1726:	f9 01       	movw	r30, r18
    1728:	e4 58       	subi	r30, 0x84	; 132
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	04 91       	lpm	r16, Z
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:144
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    172e:	00 23       	and	r16, r16
    1730:	d1 f0       	breq	.+52     	; 0x1766 <digitalWrite+0x84>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:148

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1732:	88 23       	and	r24, r24
    1734:	19 f0       	breq	.+6      	; 0x173c <digitalWrite+0x5a>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:148 (discriminator 1)
    1736:	69 83       	std	Y+1, r22	; 0x01
    1738:	67 df       	rcall	.-306    	; 0x1608 <turnOffPWM>
    173a:	69 81       	ldd	r22, Y+1	; 0x01
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:150

	out = portOutputRegister(port);
    173c:	e0 2f       	mov	r30, r16
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	ee 0f       	add	r30, r30
    1742:	ff 1f       	adc	r31, r31
    1744:	e8 57       	subi	r30, 0x78	; 120
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	a5 91       	lpm	r26, Z+
    174a:	b4 91       	lpm	r27, Z
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:153

	if (val == LOW) {
		uint8_t oldSREG = SREG;
    174c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:152
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);

	if (val == LOW) {
    174e:	61 11       	cpse	r22, r1
    1750:	05 c0       	rjmp	.+10     	; 0x175c <digitalWrite+0x7a>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:154
		uint8_t oldSREG = SREG;
    cli();
    1752:	f8 94       	cli
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:155
		*out &= ~bit;
    1754:	8c 91       	ld	r24, X
    1756:	10 95       	com	r17
    1758:	81 23       	and	r24, r17
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <digitalWrite+0x80>
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:159
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    cli();
    175c:	f8 94       	cli
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:160
		*out |= bit;
    175e:	8c 91       	ld	r24, X
    1760:	81 2b       	or	r24, r17
    1762:	8c 93       	st	X, r24
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:161
		SREG = oldSREG;
    1764:	9f bf       	out	0x3f, r25	; 63
C:\Users\ha4ev\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:163
	}
}
    1766:	0f 90       	pop	r0
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	08 95       	ret

00001772 <__fixsfsi>:
__fixsfsi():
    1772:	04 d0       	rcall	.+8      	; 0x177c <__fixunssfsi>
    1774:	68 94       	set
    1776:	b1 11       	cpse	r27, r1
    1778:	8d c0       	rjmp	.+282    	; 0x1894 <__fp_szero>
    177a:	08 95       	ret

0000177c <__fixunssfsi>:
__fixunssfsi():
    177c:	70 d0       	rcall	.+224    	; 0x185e <__fp_splitA>
    177e:	88 f0       	brcs	.+34     	; 0x17a2 <__fixunssfsi+0x26>
    1780:	9f 57       	subi	r25, 0x7F	; 127
    1782:	90 f0       	brcs	.+36     	; 0x17a8 <__fixunssfsi+0x2c>
    1784:	b9 2f       	mov	r27, r25
    1786:	99 27       	eor	r25, r25
    1788:	b7 51       	subi	r27, 0x17	; 23
    178a:	a0 f0       	brcs	.+40     	; 0x17b4 <__fixunssfsi+0x38>
    178c:	d1 f0       	breq	.+52     	; 0x17c2 <__fixunssfsi+0x46>
    178e:	66 0f       	add	r22, r22
    1790:	77 1f       	adc	r23, r23
    1792:	88 1f       	adc	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	1a f0       	brmi	.+6      	; 0x179e <__fixunssfsi+0x22>
    1798:	ba 95       	dec	r27
    179a:	c9 f7       	brne	.-14     	; 0x178e <__fixunssfsi+0x12>
    179c:	12 c0       	rjmp	.+36     	; 0x17c2 <__fixunssfsi+0x46>
    179e:	b1 30       	cpi	r27, 0x01	; 1
    17a0:	81 f0       	breq	.+32     	; 0x17c2 <__fixunssfsi+0x46>
    17a2:	77 d0       	rcall	.+238    	; 0x1892 <__fp_zero>
    17a4:	b1 e0       	ldi	r27, 0x01	; 1
    17a6:	08 95       	ret
    17a8:	74 c0       	rjmp	.+232    	; 0x1892 <__fp_zero>
    17aa:	67 2f       	mov	r22, r23
    17ac:	78 2f       	mov	r23, r24
    17ae:	88 27       	eor	r24, r24
    17b0:	b8 5f       	subi	r27, 0xF8	; 248
    17b2:	39 f0       	breq	.+14     	; 0x17c2 <__fixunssfsi+0x46>
    17b4:	b9 3f       	cpi	r27, 0xF9	; 249
    17b6:	cc f3       	brlt	.-14     	; 0x17aa <__fixunssfsi+0x2e>
    17b8:	86 95       	lsr	r24
    17ba:	77 95       	ror	r23
    17bc:	67 95       	ror	r22
    17be:	b3 95       	inc	r27
    17c0:	d9 f7       	brne	.-10     	; 0x17b8 <__fixunssfsi+0x3c>
    17c2:	3e f4       	brtc	.+14     	; 0x17d2 <__fixunssfsi+0x56>
    17c4:	90 95       	com	r25
    17c6:	80 95       	com	r24
    17c8:	70 95       	com	r23
    17ca:	61 95       	neg	r22
    17cc:	7f 4f       	sbci	r23, 0xFF	; 255
    17ce:	8f 4f       	sbci	r24, 0xFF	; 255
    17d0:	9f 4f       	sbci	r25, 0xFF	; 255
    17d2:	08 95       	ret

000017d4 <__floatunsisf>:
__floatunsisf():
    17d4:	e8 94       	clt
    17d6:	09 c0       	rjmp	.+18     	; 0x17ea <__floatsisf+0x12>

000017d8 <__floatsisf>:
    17d8:	97 fb       	bst	r25, 7
    17da:	3e f4       	brtc	.+14     	; 0x17ea <__floatsisf+0x12>
    17dc:	90 95       	com	r25
    17de:	80 95       	com	r24
    17e0:	70 95       	com	r23
    17e2:	61 95       	neg	r22
    17e4:	7f 4f       	sbci	r23, 0xFF	; 255
    17e6:	8f 4f       	sbci	r24, 0xFF	; 255
    17e8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ea:	99 23       	and	r25, r25
    17ec:	a9 f0       	breq	.+42     	; 0x1818 <__floatsisf+0x40>
    17ee:	f9 2f       	mov	r31, r25
    17f0:	96 e9       	ldi	r25, 0x96	; 150
    17f2:	bb 27       	eor	r27, r27
    17f4:	93 95       	inc	r25
    17f6:	f6 95       	lsr	r31
    17f8:	87 95       	ror	r24
    17fa:	77 95       	ror	r23
    17fc:	67 95       	ror	r22
    17fe:	b7 95       	ror	r27
    1800:	f1 11       	cpse	r31, r1
    1802:	f8 cf       	rjmp	.-16     	; 0x17f4 <__floatsisf+0x1c>
    1804:	fa f4       	brpl	.+62     	; 0x1844 <__floatsisf+0x6c>
    1806:	bb 0f       	add	r27, r27
    1808:	11 f4       	brne	.+4      	; 0x180e <__floatsisf+0x36>
    180a:	60 ff       	sbrs	r22, 0
    180c:	1b c0       	rjmp	.+54     	; 0x1844 <__floatsisf+0x6c>
    180e:	6f 5f       	subi	r22, 0xFF	; 255
    1810:	7f 4f       	sbci	r23, 0xFF	; 255
    1812:	8f 4f       	sbci	r24, 0xFF	; 255
    1814:	9f 4f       	sbci	r25, 0xFF	; 255
    1816:	16 c0       	rjmp	.+44     	; 0x1844 <__floatsisf+0x6c>
    1818:	88 23       	and	r24, r24
    181a:	11 f0       	breq	.+4      	; 0x1820 <__floatsisf+0x48>
    181c:	96 e9       	ldi	r25, 0x96	; 150
    181e:	11 c0       	rjmp	.+34     	; 0x1842 <__floatsisf+0x6a>
    1820:	77 23       	and	r23, r23
    1822:	21 f0       	breq	.+8      	; 0x182c <__floatsisf+0x54>
    1824:	9e e8       	ldi	r25, 0x8E	; 142
    1826:	87 2f       	mov	r24, r23
    1828:	76 2f       	mov	r23, r22
    182a:	05 c0       	rjmp	.+10     	; 0x1836 <__floatsisf+0x5e>
    182c:	66 23       	and	r22, r22
    182e:	71 f0       	breq	.+28     	; 0x184c <__floatsisf+0x74>
    1830:	96 e8       	ldi	r25, 0x86	; 134
    1832:	86 2f       	mov	r24, r22
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	2a f0       	brmi	.+10     	; 0x1844 <__floatsisf+0x6c>
    183a:	9a 95       	dec	r25
    183c:	66 0f       	add	r22, r22
    183e:	77 1f       	adc	r23, r23
    1840:	88 1f       	adc	r24, r24
    1842:	da f7       	brpl	.-10     	; 0x183a <__floatsisf+0x62>
    1844:	88 0f       	add	r24, r24
    1846:	96 95       	lsr	r25
    1848:	87 95       	ror	r24
    184a:	97 f9       	bld	r25, 7
    184c:	08 95       	ret

0000184e <__fp_split3>:
__fp_split3():
    184e:	57 fd       	sbrc	r21, 7
    1850:	90 58       	subi	r25, 0x80	; 128
    1852:	44 0f       	add	r20, r20
    1854:	55 1f       	adc	r21, r21
    1856:	59 f0       	breq	.+22     	; 0x186e <__fp_splitA+0x10>
    1858:	5f 3f       	cpi	r21, 0xFF	; 255
    185a:	71 f0       	breq	.+28     	; 0x1878 <__fp_splitA+0x1a>
    185c:	47 95       	ror	r20

0000185e <__fp_splitA>:
    185e:	88 0f       	add	r24, r24
    1860:	97 fb       	bst	r25, 7
    1862:	99 1f       	adc	r25, r25
    1864:	61 f0       	breq	.+24     	; 0x187e <__fp_splitA+0x20>
    1866:	9f 3f       	cpi	r25, 0xFF	; 255
    1868:	79 f0       	breq	.+30     	; 0x1888 <__fp_splitA+0x2a>
    186a:	87 95       	ror	r24
    186c:	08 95       	ret
    186e:	12 16       	cp	r1, r18
    1870:	13 06       	cpc	r1, r19
    1872:	14 06       	cpc	r1, r20
    1874:	55 1f       	adc	r21, r21
    1876:	f2 cf       	rjmp	.-28     	; 0x185c <__fp_split3+0xe>
    1878:	46 95       	lsr	r20
    187a:	f1 df       	rcall	.-30     	; 0x185e <__fp_splitA>
    187c:	08 c0       	rjmp	.+16     	; 0x188e <__fp_splitA+0x30>
    187e:	16 16       	cp	r1, r22
    1880:	17 06       	cpc	r1, r23
    1882:	18 06       	cpc	r1, r24
    1884:	99 1f       	adc	r25, r25
    1886:	f1 cf       	rjmp	.-30     	; 0x186a <__fp_splitA+0xc>
    1888:	86 95       	lsr	r24
    188a:	71 05       	cpc	r23, r1
    188c:	61 05       	cpc	r22, r1
    188e:	08 94       	sec
    1890:	08 95       	ret

00001892 <__fp_zero>:
__fp_zero():
    1892:	e8 94       	clt

00001894 <__fp_szero>:
    1894:	bb 27       	eor	r27, r27
    1896:	66 27       	eor	r22, r22
    1898:	77 27       	eor	r23, r23
    189a:	cb 01       	movw	r24, r22
    189c:	97 f9       	bld	r25, 7
    189e:	08 95       	ret

000018a0 <__mulqi3>:
__mulqi3():
    18a0:	00 24       	eor	r0, r0

000018a2 <__mulqi3_loop>:
    18a2:	80 fd       	sbrc	r24, 0
    18a4:	06 0e       	add	r0, r22
    18a6:	66 0f       	add	r22, r22
    18a8:	11 f0       	breq	.+4      	; 0x18ae <__mulqi3_exit>
    18aa:	86 95       	lsr	r24
    18ac:	d1 f7       	brne	.-12     	; 0x18a2 <__mulqi3_loop>

000018ae <__mulqi3_exit>:
    18ae:	80 2d       	mov	r24, r0
    18b0:	08 95       	ret

000018b2 <__udivmodsi4>:
__udivmodsi4():
    18b2:	a1 e2       	ldi	r26, 0x21	; 33
    18b4:	1a 2e       	mov	r1, r26
    18b6:	aa 1b       	sub	r26, r26
    18b8:	bb 1b       	sub	r27, r27
    18ba:	fd 01       	movw	r30, r26
    18bc:	0d c0       	rjmp	.+26     	; 0x18d8 <__udivmodsi4_ep>

000018be <__udivmodsi4_loop>:
    18be:	aa 1f       	adc	r26, r26
    18c0:	bb 1f       	adc	r27, r27
    18c2:	ee 1f       	adc	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	a2 17       	cp	r26, r18
    18c8:	b3 07       	cpc	r27, r19
    18ca:	e4 07       	cpc	r30, r20
    18cc:	f5 07       	cpc	r31, r21
    18ce:	20 f0       	brcs	.+8      	; 0x18d8 <__udivmodsi4_ep>
    18d0:	a2 1b       	sub	r26, r18
    18d2:	b3 0b       	sbc	r27, r19
    18d4:	e4 0b       	sbc	r30, r20
    18d6:	f5 0b       	sbc	r31, r21

000018d8 <__udivmodsi4_ep>:
    18d8:	66 1f       	adc	r22, r22
    18da:	77 1f       	adc	r23, r23
    18dc:	88 1f       	adc	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	1a 94       	dec	r1
    18e2:	69 f7       	brne	.-38     	; 0x18be <__udivmodsi4_loop>
    18e4:	60 95       	com	r22
    18e6:	70 95       	com	r23
    18e8:	80 95       	com	r24
    18ea:	90 95       	com	r25
    18ec:	9b 01       	movw	r18, r22
    18ee:	ac 01       	movw	r20, r24
    18f0:	bd 01       	movw	r22, r26
    18f2:	cf 01       	movw	r24, r30
    18f4:	08 95       	ret

000018f6 <__mulsidi3>:
__mulsidi3():
    18f6:	68 94       	set
    18f8:	00 13       	cpse	r16, r16

000018fa <__umulsidi3>:
__umulsidi3():
    18fa:	e8 94       	clt
    18fc:	a0 e0       	ldi	r26, 0x00	; 0
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e3 e8       	ldi	r30, 0x83	; 131
    1902:	fc e0       	ldi	r31, 0x0C	; 12
    1904:	1d c0       	rjmp	.+58     	; 0x1940 <__prologue_saves__+0x10>
    1906:	ef ef       	ldi	r30, 0xFF	; 255
    1908:	e7 f9       	bld	r30, 7
    190a:	59 01       	movw	r10, r18
    190c:	6a 01       	movw	r12, r20
    190e:	5e 23       	and	r21, r30
    1910:	55 0f       	add	r21, r21
    1912:	ee 08       	sbc	r14, r14
    1914:	fe 2c       	mov	r15, r14
    1916:	87 01       	movw	r16, r14
    1918:	9b 01       	movw	r18, r22
    191a:	ac 01       	movw	r20, r24
    191c:	9e 23       	and	r25, r30
    191e:	99 0f       	add	r25, r25
    1920:	66 0b       	sbc	r22, r22
    1922:	76 2f       	mov	r23, r22
    1924:	cb 01       	movw	r24, r22
    1926:	41 d0       	rcall	.+130    	; 0x19aa <__muldi3>
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	ea e0       	ldi	r30, 0x0A	; 10
    192e:	24 c0       	rjmp	.+72     	; 0x1978 <__epilogue_restores__+0x10>

00001930 <__prologue_saves__>:
__prologue_saves__():
    1930:	2f 92       	push	r2
    1932:	3f 92       	push	r3
    1934:	4f 92       	push	r4
    1936:	5f 92       	push	r5
    1938:	6f 92       	push	r6
    193a:	7f 92       	push	r7
    193c:	8f 92       	push	r8
    193e:	9f 92       	push	r9
    1940:	af 92       	push	r10
    1942:	bf 92       	push	r11
    1944:	cf 92       	push	r12
    1946:	df 92       	push	r13
    1948:	ef 92       	push	r14
    194a:	ff 92       	push	r15
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	ca 1b       	sub	r28, r26
    195a:	db 0b       	sbc	r29, r27
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	09 94       	ijmp

00001968 <__epilogue_restores__>:
__epilogue_restores__():
    1968:	2a 88       	ldd	r2, Y+18	; 0x12
    196a:	39 88       	ldd	r3, Y+17	; 0x11
    196c:	48 88       	ldd	r4, Y+16	; 0x10
    196e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1970:	6e 84       	ldd	r6, Y+14	; 0x0e
    1972:	7d 84       	ldd	r7, Y+13	; 0x0d
    1974:	8c 84       	ldd	r8, Y+12	; 0x0c
    1976:	9b 84       	ldd	r9, Y+11	; 0x0b
    1978:	aa 84       	ldd	r10, Y+10	; 0x0a
    197a:	b9 84       	ldd	r11, Y+9	; 0x09
    197c:	c8 84       	ldd	r12, Y+8	; 0x08
    197e:	df 80       	ldd	r13, Y+7	; 0x07
    1980:	ee 80       	ldd	r14, Y+6	; 0x06
    1982:	fd 80       	ldd	r15, Y+5	; 0x05
    1984:	0c 81       	ldd	r16, Y+4	; 0x04
    1986:	1b 81       	ldd	r17, Y+3	; 0x03
    1988:	aa 81       	ldd	r26, Y+2	; 0x02
    198a:	b9 81       	ldd	r27, Y+1	; 0x01
    198c:	ce 0f       	add	r28, r30
    198e:	d1 1d       	adc	r29, r1
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	ed 01       	movw	r28, r26
    199c:	08 95       	ret

0000199e <__tablejump2__>:
__tablejump2__():
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31

000019a2 <__tablejump__>:
__tablejump__():
    19a2:	05 90       	lpm	r0, Z+
    19a4:	f4 91       	lpm	r31, Z
    19a6:	e0 2d       	mov	r30, r0
    19a8:	09 94       	ijmp

000019aa <__muldi3>:
__muldi3():
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	9f 92       	push	r9
    19b0:	a0 e4       	ldi	r26, 0x40	; 64
    19b2:	9a 2e       	mov	r9, r26
    19b4:	00 24       	eor	r0, r0
    19b6:	d0 01       	movw	r26, r0
    19b8:	e0 01       	movw	r28, r0
    19ba:	f0 01       	movw	r30, r0
    19bc:	16 95       	lsr	r17
    19be:	07 95       	ror	r16
    19c0:	f7 94       	ror	r15
    19c2:	e7 94       	ror	r14
    19c4:	d7 94       	ror	r13
    19c6:	c7 94       	ror	r12
    19c8:	b7 94       	ror	r11
    19ca:	a7 94       	ror	r10
    19cc:	48 f4       	brcc	.+18     	; 0x19e0 <__muldi3+0x36>
    19ce:	10 68       	ori	r17, 0x80	; 128
    19d0:	a2 0f       	add	r26, r18
    19d2:	b3 1f       	adc	r27, r19
    19d4:	c4 1f       	adc	r28, r20
    19d6:	d5 1f       	adc	r29, r21
    19d8:	e6 1f       	adc	r30, r22
    19da:	f7 1f       	adc	r31, r23
    19dc:	08 1e       	adc	r0, r24
    19de:	19 1e       	adc	r1, r25
    19e0:	22 0f       	add	r18, r18
    19e2:	33 1f       	adc	r19, r19
    19e4:	44 1f       	adc	r20, r20
    19e6:	55 1f       	adc	r21, r21
    19e8:	66 1f       	adc	r22, r22
    19ea:	77 1f       	adc	r23, r23
    19ec:	88 1f       	adc	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	9a 94       	dec	r9
    19f2:	21 f7       	brne	.-56     	; 0x19bc <__muldi3+0x12>
    19f4:	9d 01       	movw	r18, r26
    19f6:	ae 01       	movw	r20, r28
    19f8:	bf 01       	movw	r22, r30
    19fa:	c0 01       	movw	r24, r0
    19fc:	11 24       	eor	r1, r1
    19fe:	9f 90       	pop	r9
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <abort>:
abort():
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	f8 94       	cli
    1a0c:	00 c0       	rjmp	.+0      	; 0x1a0e <_exit>

00001a0e <_exit>:
exit():
    1a0e:	f8 94       	cli

00001a10 <__stop_program>:
__stop_program():
    1a10:	ff cf       	rjmp	.-2      	; 0x1a10 <__stop_program>
